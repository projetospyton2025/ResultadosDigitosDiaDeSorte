PS J:\Meu Drive\ProjetosPython\Loterias\Loterias-ResultadosDigitos\ResultadosDigitosDiaDeSorte> dir


    Diret√≥rio: J:\Meu Drive\ProjetosPython\Loterias\Loterias-ResultadosDigitos\ResultadosDigitosDiaDeSorte


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
d-----        05/03/2025     16:29                app
d-----        05/03/2025     16:19                Requisitos
d-----        05/03/2025     16:19                static
d-----        14/03/2025     20:14                templates
d-----        14/03/2025     19:06                venv
------        27/02/2025     04:46           1096 LICENSE
------        27/02/2025     04:46             27 README.md
------        05/03/2025     15:45            182 .env
------        27/02/2025     05:43            221 .gitignore
------        05/03/2025     16:23             68 app.log
------        05/03/2025     15:41            110 requirements.txt
------        05/03/2025     16:27           1648 app.py

PS J:\Meu Drive\ProjetosPython\Loterias\Loterias-ResultadosDigitos\ResultadosDigitosDiaDeSorte> Get-ChildItem -Directory | ForEach-Object { $_.FullName; Get-ChildItem $_.FullName }
>>
J:\Meu Drive\ProjetosPython\Loterias\Loterias-ResultadosDigitos\ResultadosDigitosDiaDeSorte\app


    Diret√≥rio: J:\Meu Drive\ProjetosPython\Loterias\Loterias-ResultadosDigitos\ResultadosD
    igitosDiaDeSorte\app


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
d-----        14/03/2025     19:12                __pycache__
------        05/03/2025     15:51           6713 routes.py
------        27/02/2025     05:43            318 __init__.py
J:\Meu Drive\ProjetosPython\Loterias\Loterias-ResultadosDigitos\ResultadosDigitosDiaDeSorte\Requisitos


    Diret√≥rio: J:\Meu Drive\ProjetosPython\Loterias\Loterias-ResultadosDigitos\ResultadosD
    igitosDiaDeSorte\Requisitos


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
d-----        05/03/2025     16:19                antes
d-----        14/03/2025     20:35                depois
J:\Meu Drive\ProjetosPython\Loterias\Loterias-ResultadosDigitos\ResultadosDigitosDiaDeSorte\static


    Diret√≥rio: J:\Meu Drive\ProjetosPython\Loterias\Loterias-ResultadosDigitos\ResultadosD
    igitosDiaDeSorte\static


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
d-----        06/03/2025     06:59                css
d-----        06/03/2025     06:07                js
J:\Meu Drive\ProjetosPython\Loterias\Loterias-ResultadosDigitos\ResultadosDigitosDiaDeSorte\templates


    Diret√≥rio: J:\Meu Drive\ProjetosPython\Loterias\Loterias-ResultadosDigitos\ResultadosD
    igitosDiaDeSorte\templates


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
------        14/03/2025     17:45           3558 index.html
J:\Meu Drive\ProjetosPython\Loterias\Loterias-ResultadosDigitos\ResultadosDigitosDiaDeSorte\venv


    Diret√≥rio: J:\Meu Drive\ProjetosPython\Loterias\Loterias-ResultadosDigitos\ResultadosD
    igitosDiaDeSorte\venv


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
d-----        14/03/2025     19:06                Include
d-----        14/03/2025     19:06                Lib
d-----        14/03/2025     19:11                Scripts
------        14/03/2025     19:06             71 .gitignore
------        14/03/2025     19:06            249 pyvenv.cfg



#requirements.txt
Flask==2.3.3
Flask-Cors==4.0.0
redis==5.0.1
python-dotenv==1.0.0
requests==2.31.0
gunicorn==21.2.0


#app.py
import logging
from app import app
from dotenv import load_dotenv, find_dotenv
import redis
import os


# Tenta encontrar e carregar o arquivo .env
dotenv_path = find_dotenv()
if not dotenv_path:
    print("‚ùå ERRO: Arquivo .env n√£o encontrado!")
else:
    print(f"‚úÖ Arquivo .env encontrado: {dotenv_path}")
    #load_dotenv(dotenv_path)
    load_dotenv()

# Pegando a URL do Redis
REDIS_URL = os.getenv("REDIS_URL")

print(f"üîç REDIS_URL: {REDIS_URL}")  # Deve exibir a URL do Redis, n√£o None!

if not REDIS_URL:
    print("‚ùå ERRO: REDIS_URL n√£o foi carregada! Verifique o .env ou defina manualmente.")
    exit(1)  # Encerra o programa se a vari√°vel n√£o foi carregada corretamente

try:
    # Criando a conex√£o com o Redis
    redis_client = redis.Redis.from_url(REDIS_URL, decode_responses=True)
    
    # Testando a conex√£o
    redis_client.ping()
    print("‚úÖ Conex√£o com o Redis estabelecida com sucesso!")

except Exception as e:
    print(f"‚ùå Erro ao conectar ao Redis: {type(e).__name__} - {e}")


# Configurar logging
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('app.log')
    ]
)

logger = logging.getLogger(__name__)

"""
if __name__ == '__main__':
    logger.info("Iniciando aplica√ß√£o...")
    port = int(os.environ.get("PORT", 5000))
    app.run(host='0.0.0.0', port=port, debug=True)
  
"""


if __name__ == '__main__':
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)


#.gitignore
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*.class

# Environment
.env
venv/
env/
ENV/

# Flask
instance/
.webassets-cache

# Redis
dump.rdb

# Logs
*.log

# Outros
.DS_Store


#.env
API_BASE_URL=https://loteriascaixa-api.herokuapp.com/api
REDIS_URL=redis://default:B058xThhTvAbptQa0s25EAGk7A5u473O@redis-13833.c336.samerica-east1-1.gce.redns.redis-cloud.com:13833


#index.html
<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>D√≠gitos Dia de Sorte</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/styles.css') }}">
	  <link rel="stylesheet" href="{{ url_for('static', filename='css/popup-style.css') }}">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/tabelas-responsivas.css') }}">
</head>
<body>
    <div class="container">
        <h1>An√°lise de D√≠gitos do <span class="destaque">Dia de Sorte</span></h1>
        
        <div class="centralizado">
            <p>An√°lise dos d√≠gitos de todos os sorteios do Dia de Sorte</p>
        </div>

        <div class="actions">
            <button class="button" id="loadButton">Carregar Resultados</button>
        </div>

        <div id="loadingMessage" class="loading" style="display: none;">Carregando resultados...</div>
        <div id="completedMessage" class="completed" style="display: none;">Carregamento conclu√≠do!</div>

        <!-- Nova se√ß√£o de filtros -->
        <div id="filterContainer" class="filter-container">
            <!-- Ser√° preenchido via JavaScript -->
        </div>

        <!-- Estat√≠sticas de D√≠gitos -->
        <div class="statistics-container">
            <h2>Estat√≠sticas de D√≠gitos</h2>
            <div id="digitStats" class="digit-stats">
                <div class="digit-frequency">
                    <h3>Frequ√™ncia de D√≠gitos</h3>
                    <div id="digitFrequency"></div>
                </div>
                <div class="digit-charts">
                    <h3>Gr√°fico de Frequ√™ncia</h3>
                    <div id="digitChart"></div>
                </div>
            </div>
        </div>

        <!-- Nova se√ß√£o de an√°lise de combina√ß√µes -->
        <div id="combinationAnalysis" class="combination-analysis">
            <!-- Ser√° preenchido via JavaScript -->
        </div>

        <!-- Tabela de Resultados -->
        <h2>Resultados Detalhados</h2>
        <table id="diaDeSorteResults">
            <thead>
                <tr>
                    <th>Concurso</th>
                    <th>Data</th>
                    <th>Dezenas</th>
                    <th>D√≠gitos</th>
                    <th>D√≠gitos Ordenados</th>
                    <th>Qtd. D√≠gitos</th>
                    <th>Copiar</th>
                </tr>
            </thead>
            <tbody>
            </tbody>
        </table>

        <!-- Bot√µes de Download -->
        <div class="download-buttons">
            <button class="button" id="downloadCSV">Baixar XLS</button>
            <button class="button" id="downloadJSON">Baixar HTML</button>
            <button class="button" id="downloadTXT">Baixar TXT</button>
        </div>
    </div>

    <footer>Feito por: <i>M√°rcio Fernando Maia - Todos os direitos reservados - 2025</i></footer>

    <script src="{{ url_for('static', filename='js/script.js') }}"></script>
	  <script src="{{ url_for('static', filename='js/highlight-max.js') }}"></script>
	  <script src="{{ url_for('static', filename='js/frequency-analysis.js') }}"></script>
	  <script src="{{ url_for('static', filename='js/popup-explicacao.js') }}"></script>
    <script src="{{ url_for('static', filename='js/resumo-simples.js') }}"></script>
    <script src="{{ url_for('static', filename='js/tabelas-responsivas.js') }}"></script>
</body>
</html>


#frequency-analysis.js
// Fun√ß√£o para analisar frequ√™ncias entre sequ√™ncias de d√≠gitos
// Fun√ß√£o para analisar frequ√™ncias entre sequ√™ncias de d√≠gitos
function analisarFrequenciaEntreSequencias() {
    console.log("Fun√ß√£o analisarFrequenciaEntreSequencias chamada");
    
    // Verifica onde os resultados podem estar armazenados
    let resultados = null;
    
    // Tenta encontrar os resultados nas vari√°veis poss√≠veis
    if (window.allResults && window.allResults.length > 0) {
        resultados = window.allResults;
        console.log("Resultados encontrados em window.allResults:", resultados.length);
    } else if (window.filteredResults && window.filteredResults.length > 0) {
        resultados = window.filteredResults;
        console.log("Resultados encontrados em window.filteredResults:", resultados.length);
    } else if (typeof allResults !== 'undefined' && allResults.length > 0) {
        resultados = allResults;
        console.log("Resultados encontrados em allResults:", resultados.length);
    } else {
        // Tentar buscar os resultados da tabela (backup)
        try {
            resultados = extrairResultadosDaTabela();
            if (resultados && resultados.length > 0) {
                console.log("Resultados extra√≠dos da tabela:", resultados.length);
            }
        } catch (error) {
            console.error("Erro ao extrair resultados da tabela:", error);
        }
    }
    
    // Verificar se os resultados foram carregados
    if (!resultados || resultados.length === 0) {
        console.error("Resultados n√£o carregados. Execute o carregamento primeiro.");
        alert("√â necess√°rio carregar os resultados primeiro antes de analisar frequ√™ncias.\n\nPor favor, clique em 'Carregar Resultados' e tente novamente.");
        return;
    }
    
    console.log("Iniciando an√°lise detalhada de frequ√™ncia entre sequ√™ncias...");
    
    // Estrutura para armazenar estat√≠sticas
    const estatisticas = {
        combinacoesFrequentes: {},  // Para armazenar todas as combina√ß√µes encontradas
        intervalos: {},             // Para armazenar an√°lises de intervalos
        mediaGeral: 0,              // M√©dia geral de intervalos
        totalIntervalos: 0          // Total de intervalos analisados
    };
    
    // 1. Agrupar resultados por combina√ß√£o de d√≠gitos
    resultados.forEach(result => {
        const combinacao = result.digitos_ordenados.join(',');
        if (!estatisticas.combinacoesFrequentes[combinacao]) {
            estatisticas.combinacoesFrequentes[combinacao] = {
                digitos: result.digitos_ordenados,
                quantidade: result.contagem_digitos,
                concursos: [],
                intervalos: [],
                diferencasDetalhadas: []
            };
        }
        estatisticas.combinacoesFrequentes[combinacao].concursos.push(result.concurso);
    });
    
    // 2. Para cada combina√ß√£o, calcular intervalos entre ocorr√™ncias
    Object.values(estatisticas.combinacoesFrequentes).forEach(combo => {
        // Ordenar concursos em ordem crescente
        combo.concursos.sort((a, b) => a - b);
        
        // Calcular intervalos (diferen√ßas entre concursos consecutivos)
        for (let i = 1; i < combo.concursos.length; i++) {
            const intervalo = combo.concursos[i] - combo.concursos[i-1];
            combo.intervalos.push(intervalo);
            
            // Armazenar detalhes das diferen√ßas
            combo.diferencasDetalhadas.push({
                de: combo.concursos[i-1],
                para: combo.concursos[i],
                diferenca: intervalo
            });
        }
        
        // Calcular estat√≠sticas dos intervalos
        if (combo.intervalos.length > 0) {
            combo.somaIntervalos = combo.intervalos.reduce((acc, val) => acc + val, 0);
            combo.mediaIntervalos = Math.round(combo.somaIntervalos / combo.intervalos.length);
            combo.menorIntervalo = Math.min(...combo.intervalos);
            combo.maiorIntervalo = Math.max(...combo.intervalos);
            combo.ultimoIntervalo = combo.intervalos[combo.intervalos.length - 1];
            
            // Adicionar ao total geral
            estatisticas.totalIntervalos += combo.intervalos.length;
            estatisticas.mediaGeral = (estatisticas.mediaGeral || 0) + combo.somaIntervalos;
        }
    });
    
    // Calcular m√©dia geral de intervalos
    if (estatisticas.totalIntervalos > 0) {
        estatisticas.mediaGeral = Math.round(estatisticas.mediaGeral / estatisticas.totalIntervalos);
    }
    
    // 3. Converter para array e ordenar por frequ√™ncia (n√∫mero de ocorr√™ncias)
    estatisticas.combinacoesOrdenadas = Object.values(estatisticas.combinacoesFrequentes)
        .sort((a, b) => b.concursos.length - a.concursos.length);
    
    // 4. Encontrar valores m√°ximos para destaque
    estatisticas.maximos = {
        frequencia: Math.max(...estatisticas.combinacoesOrdenadas.map(c => c.concursos.length)),
        mediaIntervalos: Math.max(...estatisticas.combinacoesOrdenadas.map(c => c.mediaIntervalos || 0)),
        menorIntervalo: Math.max(...estatisticas.combinacoesOrdenadas.map(c => c.menorIntervalo || 0)),
        maiorIntervalo: Math.max(...estatisticas.combinacoesOrdenadas.map(c => c.maiorIntervalo || 0)),
        ultimoIntervalo: Math.max(...estatisticas.combinacoesOrdenadas.map(c => c.ultimoIntervalo || 0))
    };
    
    // 5. Gerar sa√≠da para a interface
    gerarSaidaAnaliseFrequencia(estatisticas);
    
    // 6. Adicionar op√ß√£o para exportar
    adicionarBotaoExportarFrequencia(estatisticas);
    
	// Armazenar os resultados analisados globalmente para uso posterior
    window.resultadosAnalisados = estatisticas;
	
	
	// Retornar as estat√≠sticas
    return estatisticas;
}

// Fun√ß√£o para extrair resultados da tabela caso as vari√°veis n√£o estejam dispon√≠veis
function extrairResultadosDaTabela() {
    const tabela = document.getElementById('megaSenaResults');
    if (!tabela) return null;
    
    const linhas = tabela.querySelectorAll('tbody tr');
    if (!linhas || linhas.length === 0) return null;
    
    const resultados = [];
    
    linhas.forEach(linha => {
        const colunas = linha.querySelectorAll('td');
        if (colunas.length >= 5) {
            // Extrair dados das colunas
            const concurso = parseInt(colunas[0].textContent.trim());
            const data = colunas[1].textContent.trim();
            const digitosTexto = colunas[4].textContent.trim(); // D√≠gitos ordenados
            
            // Converter d√≠gitos ordenados para array
            const digitos_ordenados = digitosTexto.split(',').map(d => d.trim());
            
            // Criar objeto de resultado
            resultados.push({
                concurso,
                data,
                digitos_ordenados,
                contagem_digitos: digitos_ordenados.length
            });
        }
    });
    
    return resultados;
}




// Fun√ß√£o para gerar sa√≠da na interface
function gerarSaidaAnaliseFrequencia(estatisticas) {
    // Verificar se j√° existe o container para an√°lise de frequ√™ncia
    let container = document.getElementById('frequencia-analise-container');
    if (!container) {
        container = document.createElement('div');
        container.id = 'frequencia-analise-container';
        container.className = 'statistics-container';
        
        // Inserir ap√≥s o container de combina√ß√µes existente
        const combinationAnalysis = document.getElementById('combinationAnalysis');
        if (combinationAnalysis) {
            combinationAnalysis.parentNode.insertBefore(container, combinationAnalysis.nextSibling);
        } else {
            // Alternativa: inserir antes da tabela de resultados
            const resultsTable = document.getElementById('megaSenaResults');
            if (resultsTable) {
                resultsTable.parentNode.insertBefore(container, resultsTable);
            } else {
                // √öltima op√ß√£o: adicionar ao final do container principal
                document.querySelector('.container').appendChild(container);
            }
        }
    }
    
    // Limpar o container existente
    container.innerHTML = '';
    
    // Adicionar t√≠tulo
    const title = document.createElement('h2');
    title.textContent = 'An√°lise de Frequ√™ncia entre Sequ√™ncias de D√≠gitos';
    container.appendChild(title);
    
    // Adicionar estat√≠sticas gerais
    const statsSection = document.createElement('div');
    statsSection.className = 'estatisticas-gerais';
    statsSection.innerHTML = `
        <h3>Estat√≠sticas Gerais de Intervalos</h3>
        <div class="stats-grid">
            <div class="stat-box">
                <div class="stat-title">M√©dia Geral</div>
                <div class="stat-value">${estatisticas.mediaGeral}</div>
                <div class="stat-desc">concursos entre apari√ß√µes</div>
            </div>
            <div class="stat-box">
                <div class="stat-title">Total de Intervalos</div>
                <div class="stat-value">${estatisticas.totalIntervalos}</div>
                <div class="stat-desc">analisados</div>
            </div>
            <div class="stat-box">
                <div class="stat-title">Maior Frequ√™ncia</div>
                <div class="stat-value destacado">${estatisticas.maximos.frequencia}</div>
                <div class="stat-desc">apari√ß√µes</div>
            </div>
            <div class="stat-box">
                <div class="stat-title">Maior Intervalo</div>
                <div class="stat-value destacado">${estatisticas.maximos.maiorIntervalo}</div>
                <div class="stat-desc">concursos</div>
            </div>
        </div>
    `;
    container.appendChild(statsSection);
    
    // Adicionar tabela de combina√ß√µes com frequ√™ncias
    const tableSection = document.createElement('div');
    tableSection.className = 'section-analise-frequencia';
    tableSection.innerHTML = `
        <h3>Frequ√™ncias entre Sequ√™ncias de D√≠gitos</h3>
        <p>Esta tabela mostra a an√°lise de todas as combina√ß√µes encontradas, ordenadas por frequ√™ncia.</p>
        <table id="tabela-frequencia-sequencias" class="combinations-table">
            <thead>
                <tr>
                    <th>Combina√ß√£o</th>
                    <th>Qtd. D√≠gitos</th>
                    <th>Frequ√™ncia</th>
                    <th>M√©dia Intervalos</th>
                    <th>Menor Intervalo</th>
                    <th>Maior Intervalo</th>
                    <th>√öltimo Intervalo</th>
                    <th>Diferen√ßas</th>
                    <th>Detalhes</th>
                </tr>
            </thead>
            <tbody>
                ${gerarLinhasTabelaFrequencia(estatisticas)}
            </tbody>
        </table>
    `;
    container.appendChild(tableSection);
    
    // Adicionar CSS necess√°rio
    adicionarEstilosAnaliseFrequencia();
    
    // Adicionar evento para bot√µes de detalhes
    adicionarEventosBotoesDetalhes(estatisticas);
}

// Fun√ß√£o para gerar linhas da tabela de frequ√™ncia
function gerarLinhasTabelaFrequencia(estatisticas) {
    let html = '';
    
    estatisticas.combinacoesOrdenadas.forEach((combo, index) => {
        // Verificar se o valor √© m√°ximo para destacar
        const isMaxFreq = combo.concursos.length === estatisticas.maximos.frequencia;
        const isMaxMedia = combo.mediaIntervalos === estatisticas.maximos.mediaIntervalos;
        const isMaxMenor = combo.menorIntervalo === estatisticas.maximos.menorIntervalo;
        const isMaxMaior = combo.maiorIntervalo === estatisticas.maximos.maiorIntervalo;
        const isMaxUltimo = combo.ultimoIntervalo === estatisticas.maximos.ultimoIntervalo;
        
        // Limitar exibi√ß√£o das diferen√ßas para os primeiros 5 valores
        const diferencasTexto = combo.intervalos.slice(0, 5).join(',') + 
            (combo.intervalos.length > 5 ? '...' : '');
        
        html += `
            <tr class="${isMaxFreq ? 'row-destacado' : ''}">
                <td>${combo.digitos.join(',')}</td>
                <td>${combo.quantidade}</td>
                <td class="${isMaxFreq ? 'valor-max' : ''}">${combo.concursos.length}</td>
                <td class="${isMaxMedia ? 'valor-max' : ''}">${combo.mediaIntervalos || '-'}</td>
                <td class="${isMaxMenor ? 'valor-max' : ''}">${combo.menorIntervalo || '-'}</td>
                <td class="${isMaxMaior ? 'valor-max' : ''}">${combo.maiorIntervalo || '-'}</td>
                <td class="${isMaxUltimo ? 'valor-max' : ''}">${combo.ultimoIntervalo || '-'}</td>
                <td>${diferencasTexto}</td>
                <td>
                    <button class="button-detail" data-index="${index}">
                        Ver Detalhes
                    </button>
                </td>
            </tr>
        `;
    });
    
    return html;
}

// Fun√ß√£o para adicionar estilos CSS
function adicionarEstilosAnaliseFrequencia() {
    // Verificar se o estilo j√° existe
    if (document.getElementById('estilo-analise-frequencia')) return;
    
    const style = document.createElement('style');
    style.id = 'estilo-analise-frequencia';
    style.textContent = `
        .estatisticas-gerais {
            margin: 20px 0;
            padding: 15px;
            background-color: #f0f8ff;
            border-radius: 5px;
            border: 1px solid #4CAF50;
        }
        .stats-grid {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            justify-content: space-between;
            margin-top: 15px;
        }
        .stat-box {
            flex: 1;
            min-width: 200px;
            padding: 15px;
            background-color: #e8f5e9;
            border-radius: 5px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            text-align: center;
        }
        .stat-title {
            font-weight: bold;
            color: #2e7d32;
            margin-bottom: 5px;
        }
        .stat-value {
            font-size: 24px;
            font-weight: bold;
            margin: 10px 0;
        }
        .stat-desc {
            font-size: 14px;
            color: #666;
        }
        .destacado, .valor-max {
            color: #d9534f;
            font-weight: bold;
        }
        .row-destacado {
            background-color: #ffecb3 !important;
        }
        .section-analise-frequencia {
            margin: 30px 0;
        }
        .button-detail {
            background-color: #4CAF50;
            color: white;
            border: none;
            padding: 5px 10px;
            border-radius: 3px;
            cursor: pointer;
        }
        .button-detail:hover {
            background-color: #45a049;
        }
        .modal-detalhe-frequencia {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.7);
            z-index: 1000;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        .modal-content-frequencia {
            background-color: white;
            padding: 20px;
            border-radius: 5px;
            max-width: 800px;
            max-height: 80vh;
            overflow-y: auto;
            width: 90%;
        }
        .close-button-frequencia {
            float: right;
            font-size: 24px;
            font-weight: bold;
            cursor: pointer;
            color: #666;
        }
        .diferenca-positiva {
            color: green;
        }
        .diferenca-negativa {
            color: red;
        }
    `;
    
    document.head.appendChild(style);
}

// Fun√ß√£o para adicionar eventos aos bot√µes de detalhes
function adicionarEventosBotoesDetalhes(estatisticas) {
    document.querySelectorAll('.button-detail').forEach(button => {
        button.addEventListener('click', function() {
            const index = parseInt(this.getAttribute('data-index'));
            const combo = estatisticas.combinacoesOrdenadas[index];
            mostrarDetalhesFrequencia(combo);
        });
    });
}

// Fun√ß√£o para mostrar detalhes da frequ√™ncia
function mostrarDetalhesFrequencia(combo) {
    // Criar modal
    const modal = document.createElement('div');
    modal.className = 'modal-detalhe-frequencia';
    
    // Criar conte√∫do do modal
    const content = document.createElement('div');
    content.className = 'modal-content-frequencia';
    
    // Bot√£o para fechar
    const closeButton = document.createElement('span');
    closeButton.className = 'close-button-frequencia';
    closeButton.innerHTML = '&times;';
    closeButton.onclick = () => document.body.removeChild(modal);
    
    // T√≠tulo e informa√ß√µes b√°sicas
    content.innerHTML = `
        <h3>Detalhes da Combina√ß√£o: ${combo.digitos.join(',')}</h3>
        <p><strong>Quantidade de d√≠gitos:</strong> ${combo.quantidade}</p>
        <p><strong>Aparece em ${combo.concursos.length} concursos:</strong> ${combo.concursos.slice(0, 20).join(', ')}${combo.concursos.length > 20 ? '...' : ''}</p>
        <p><strong>M√©dia de intervalo:</strong> ${combo.mediaIntervalos || '-'} concursos</p>
        <p><strong>Menor intervalo:</strong> ${combo.menorIntervalo || '-'} concursos</p>
        <p><strong>Maior intervalo:</strong> ${combo.maiorIntervalo || '-'} concursos</p>
        
        <h4>Intervalos entre Ocorr√™ncias</h4>
        <table style="width:100%; border-collapse: collapse; margin: 15px 0;">
            <thead>
                <tr>
                    <th style="padding: 8px; border: 1px solid #ddd; background-color: #4CAF50; color: white;">De Concurso</th>
                    <th style="padding: 8px; border: 1px solid #ddd; background-color: #4CAF50; color: white;">Para Concurso</th>
                    <th style="padding: 8px; border: 1px solid #ddd; background-color: #4CAF50; color: white;">Intervalo</th>
                </tr>
            </thead>
            <tbody>
                ${gerarTabelaDetalheIntervalos(combo)}
            </tbody>
        </table>
    `;
    
    // Adicionar ao modal
    content.insertBefore(closeButton, content.firstChild);
    modal.appendChild(content);
    document.body.appendChild(modal);
    
    // Fechar modal ao clicar fora dele
    modal.addEventListener('click', function(e) {
        if (e.target === modal) {
            document.body.removeChild(modal);
        }
    });
}

// Fun√ß√£o para gerar tabela de detalhe de intervalos
function gerarTabelaDetalheIntervalos(combo) {
    if (!combo.diferencasDetalhadas || combo.diferencasDetalhadas.length === 0) {
        return '<tr><td colspan="3" style="text-align:center; padding: 8px; border: 1px solid #ddd;">Nenhum intervalo dispon√≠vel</td></tr>';
    }
    
    let html = '';
    
    combo.diferencasDetalhadas.forEach((intervalo, index) => {
        html += `
            <tr>
                <td style="padding: 8px; border: 1px solid #ddd;">${intervalo.de}</td>
                <td style="padding: 8px; border: 1px solid #ddd;">${intervalo.para}</td>
                <td style="padding: 8px; border: 1px solid #ddd;">${intervalo.diferenca}</td>
            </tr>
        `;
    });
    
    return html;
}

// Fun√ß√£o para adicionar bot√£o de exportar an√°lise
function adicionarBotaoExportarFrequencia(estatisticas) {
    const downloadButtonsDiv = document.querySelector('.download-buttons');
    if (!downloadButtonsDiv) return;
    
    // Verificar se o bot√£o j√° existe
    if (document.getElementById('exportarAnaliseFrequencia')) return;
    
    const button = document.createElement('button');
    button.id = 'exportarAnaliseFrequencia';
    button.className = 'button';
    button.textContent = 'Exportar An√°lise de Frequ√™ncia';
    button.onclick = () => exportarAnaliseFrequencia(estatisticas);
    
    downloadButtonsDiv.appendChild(button);
}

// Fun√ß√£o para exportar an√°lise
function exportarAnaliseFrequencia(estatisticas) {
    // Gerar conte√∫do para Excel
    let excelContent = `
<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:x="urn:schemas-microsoft-com:office:excel" xmlns="http://www.w3.org/TR/REC-html40">
<head>
    <!--[if gte mso 9]>
    <xml>
        <x:ExcelWorkbook>
            <x:ExcelWorksheets>
                <x:ExcelWorksheet>
                    <x:Name>An√°lise Frequ√™ncia</x:Name>
                    <x:WorksheetOptions>
                        <x:DisplayGridlines/>
                    </x:WorksheetOptions>
                </x:ExcelWorksheet>
            </x:ExcelWorksheets>
        </x:ExcelWorkbook>
    </xml>
    <![endif]-->
    <style>
        th { 
            background-color: #4CAF50; 
            color: white; 
            font-weight: bold; 
            text-align: center; 
            border: 1px solid #ddd;
            padding: 8px;
        }
        td { 
            text-align: center; 
            border: 1px solid #ddd;
            padding: 8px;
        }
        .header {
            font-size: 16pt;
            font-weight: bold;
            color: #006400;
            text-align: center;
            padding: 10px;
        }
        .subheader {
            font-size: 14pt;
            font-weight: bold;
            color: #006400;
            padding: 5px;
        }
        .valor-max {
            color: #d9534f;
            font-weight: bold;
        }
    </style>
</head>
<body>
    <div class="header">An√°lise de Frequ√™ncia entre Sequ√™ncias de D√≠gitos - Mega-Sena</div>
    
    <div class="subheader">Estat√≠sticas Gerais</div>
    <table width="100%" border="1" cellspacing="0" cellpadding="5">
        <tr>
            <th>M√©trica</th>
            <th>Valor</th>
            <th>Descri√ß√£o</th>
        </tr>
        <tr>
            <td>M√©dia Geral de Intervalos</td>
            <td>${estatisticas.mediaGeral}</td>
            <td>M√©dia de concursos entre repeti√ß√µes</td>
        </tr>
        <tr>
            <td>Total de Intervalos</td>
            <td>${estatisticas.totalIntervalos}</td>
            <td>N√∫mero total de intervalos analisados</td>
        </tr>
        <tr>
            <td>Maior Frequ√™ncia</td>
            <td class="valor-max">${estatisticas.maximos.frequencia}</td>
            <td>Combina√ß√£o que mais aparece</td>
        </tr>
        <tr>
            <td>Maior Intervalo</td>
            <td class="valor-max">${estatisticas.maximos.maiorIntervalo}</td>
            <td>Maior n√∫mero de concursos entre repeti√ß√µes</td>
        </tr>
    </table>
    
    <div class="subheader">Frequ√™ncias entre Sequ√™ncias</div>
    <table width="100%" border="1" cellspacing="0" cellpadding="5">
        <tr>
            <th>Combina√ß√£o</th>
            <th>Qtd. D√≠gitos</th>
            <th>Frequ√™ncia</th>
            <th>M√©dia Intervalos</th>
            <th>Menor Intervalo</th>
            <th>Maior Intervalo</th>
            <th>√öltimo Intervalo</th>
            <th>Diferen√ßas</th>
        </tr>
`;
    
    // Adicionar cada linha
    estatisticas.combinacoesOrdenadas.forEach(combo => {
        // Verificar destaques
        const isMaxFreq = combo.concursos.length === estatisticas.maximos.frequencia;
        const isMaxMedia = combo.mediaIntervalos === estatisticas.maximos.mediaIntervalos;
        const isMaxMenor = combo.menorIntervalo === estatisticas.maximos.menorIntervalo;
        const isMaxMaior = combo.maiorIntervalo === estatisticas.maximos.maiorIntervalo;
        const isMaxUltimo = combo.ultimoIntervalo === estatisticas.maximos.ultimoIntervalo;
        
        // Todos os intervalos
        const diferencasTexto = combo.intervalos.join(',');
        
        excelContent += `
        <tr>
            <td>${combo.digitos.join(',')}</td>
            <td>${combo.quantidade}</td>
            <td ${isMaxFreq ? 'class="valor-max"' : ''}>${combo.concursos.length}</td>
            <td ${isMaxMedia ? 'class="valor-max"' : ''}>${combo.mediaIntervalos || '-'}</td>
            <td ${isMaxMenor ? 'class="valor-max"' : ''}>${combo.menorIntervalo || '-'}</td>
            <td ${isMaxMaior ? 'class="valor-max"' : ''}>${combo.maiorIntervalo || '-'}</td>
            <td ${isMaxUltimo ? 'class="valor-max"' : ''}>${combo.ultimoIntervalo || '-'}</td>
            <td>${diferencasTexto}</td>
        </tr>
`;
    });
    
    excelContent += `
    </table>
</body>
</html>
`;
    
    // Criar o blob com tipo MIME para Excel
    const blob = new Blob([excelContent], {type: 'application/vnd.ms-excel'});
    const link = document.createElement("a");
    link.href = URL.createObjectURL(blob);
    link.download = 'analise_frequencia_digitos_megasena.xls';
    link.click();
}

// Adicionar a fun√ß√£o ao carregamento da p√°gina
document.addEventListener('DOMContentLoaded', function() {
    // Verificar se j√° existe o bot√£o de carregamento
    const loadButton = document.getElementById('loadButton');
    if (loadButton) {
        // Guardar o evento original
        const originalOnClick = loadButton.onclick;
        
        // Adicionar novo evento que executa o original e depois a an√°lise
        loadButton.onclick = function(e) {
            // Executar o evento original
            if (typeof originalOnClick === 'function') {
                originalOnClick.call(this, e);
            }
            
            // Esperar pelo carregamento dos dados (2 segundos)
            setTimeout(function() {
                analisarFrequenciaEntreSequencias();
            }, 2000);
        };
        
        // Adicionar bot√£o espec√≠fico para an√°lise de frequ√™ncia
        const actionsDiv = document.querySelector('.actions');
        if (actionsDiv) {
            const analisarButton = document.createElement('button');
            analisarButton.className = 'button';
            analisarButton.textContent = 'Analisar Frequ√™ncias';
            analisarButton.onclick = analisarFrequenciaEntreSequencias;
            actionsDiv.appendChild(analisarButton);
        }
    }
	
});

// Fun√ß√£o para adicionar popup de explica√ß√£o √†s estat√≠sticas
function adicionarPopupExplicacao() {
    // Encontrar todos os cabe√ßalhos de estat√≠sticas
    const tituloEstatisticas = document.querySelector('.estatisticas-gerais h3');
    
    if (!tituloEstatisticas) {
        // Se n√£o encontrar o t√≠tulo, tenta criar elemento explicativo para cada stat-box
        const statBoxes = document.querySelectorAll('.stat-box');
        statBoxes.forEach(box => {
            const titulo = box.querySelector('.stat-title');
            if (titulo) {
                adicionarIconeInfo(titulo, obterExplicacaoPara(titulo.textContent.trim()));
            }
        });
        
        // Adicionar explica√ß√£o geral tamb√©m ao t√≠tulo da se√ß√£o se existir
        const tituloSecao = document.querySelector('h2:contains("Estat√≠sticas Gerais")');
        if (tituloSecao) {
            adicionarIconeInfo(tituloSecao, obterExplicacaoGeral());
        }
    } else {
        // Se encontrar o t√≠tulo, adiciona ao t√≠tulo principal
        adicionarIconeInfo(tituloEstatisticas, obterExplicacaoGeral());
    }
}

// Fun√ß√£o auxiliar para adicionar √≠cone de informa√ß√£o
function adicionarIconeInfo(elemento, explicacao) {
    // Criar √≠cone de informa√ß√£o
    const iconeInfo = document.createElement('span');
    iconeInfo.className = 'info-icon';
    iconeInfo.innerHTML = ' <i>i</i> ';
    iconeInfo.style.display = 'inline-block';
    iconeInfo.style.width = '16px';
    iconeInfo.style.height = '16px';
    iconeInfo.style.borderRadius = '50%';
    iconeInfo.style.backgroundColor = '#4CAF50';
    iconeInfo.style.color = 'white';
    iconeInfo.style.textAlign = 'center';
    iconeInfo.style.lineHeight = '16px';
    iconeInfo.style.fontSize = '12px';
    iconeInfo.style.fontWeight = 'bold';
    iconeInfo.style.marginLeft = '5px';
    iconeInfo.style.cursor = 'pointer';
    
    // Adicionar o √≠cone ap√≥s o elemento
    elemento.appendChild(iconeInfo);
    
    // Criar o popup
    const popup = document.createElement('div');
    popup.className = 'explicacao-popup';
    popup.innerHTML = explicacao;
    popup.style.display = 'none';
    popup.style.position = 'absolute';
    popup.style.backgroundColor = 'white';
    popup.style.border = '1px solid #ddd';
    popup.style.borderRadius = '5px';
    popup.style.padding = '15px';
    popup.style.boxShadow = '0 2px 10px rgba(0,0,0,0.2)';
    popup.style.zIndex = '1000';
    popup.style.maxWidth = '400px';
    popup.style.fontSize = '14px';
    popup.style.lineHeight = '1.5';
    
    // Adicionar o popup ao documento
    document.body.appendChild(popup);
    
    // Mostrar popup ao clicar no √≠cone
    iconeInfo.addEventListener('click', function(e) {
        e.stopPropagation();
        if (popup.style.display === 'none') {
            // Calcular posi√ß√£o
            const rect = iconeInfo.getBoundingClientRect();
            popup.style.left = rect.left + 'px';
            popup.style.top = (rect.bottom + 10) + 'px';
            
            // Mostrar popup
            popup.style.display = 'block';
            
            // Ocultar outros popups abertos
            document.querySelectorAll('.explicacao-popup').forEach(p => {
                if (p !== popup) p.style.display = 'none';
            });
        } else {
            popup.style.display = 'none';
        }
    });
    
    // Fechar popup ao clicar em qualquer lugar fora dele
    document.addEventListener('click', function(e) {
        if (e.target !== iconeInfo && e.target !== popup) {
            popup.style.display = 'none';
        }
    });
}

// Fun√ß√£o para obter explica√ß√£o com base no t√≠tulo
function obterExplicacaoPara(titulo) {
    switch (titulo) {
        case 'M√©dia Geral':
            return `
                <h4>M√©dia Geral de Intervalos</h4>
                <p><strong>O que significa:</strong> Em m√©dia, uma mesma combina√ß√£o espec√≠fica de d√≠gitos reaparece a cada X concursos.</p>
                <p><strong>Interpreta√ß√£o:</strong> Este valor √© calculado somando todos os intervalos detectados entre apari√ß√µes repetidas de todas as combina√ß√µes de d√≠gitos e dividindo pelo n√∫mero total de intervalos. √â uma medida da "frequ√™ncia m√©dia" com que os padr√µes se repetem.</p>
                <p><strong>Relev√¢ncia:</strong> Um valor alto indica que as combina√ß√µes de d√≠gitos tendem a demorar muitos concursos para se repetir, o que √© esperado em um sorteio aleat√≥rio.</p>
            `;
        case 'Total de Intervalos':
            return `
                <h4>Total de Intervalos Analisados</h4>
                <p><strong>O que significa:</strong> Foram detectados X casos onde uma combina√ß√£o de d√≠gitos apareceu e depois reapareceu em um concurso posterior.</p>
                <p><strong>Interpreta√ß√£o:</strong> Cada intervalo representa uma observa√ß√£o de quanto tempo (em n√∫mero de concursos) uma combina√ß√£o levou para reaparecer.</p>
                <p><strong>Relev√¢ncia:</strong> Quanto maior este n√∫mero, mais dados a an√°lise possui, tornando as estat√≠sticas mais confi√°veis.</p>
            `;
        case 'Maior Frequ√™ncia':
            return `
                <h4>Maior Frequ√™ncia</h4>
                <p><strong>O que significa:</strong> A combina√ß√£o de d√≠gitos mais comum apareceu em X concursos diferentes.</p>
                <p><strong>Interpreta√ß√£o:</strong> Este valor mostra a combina√ß√£o de d√≠gitos que mais se repetiu na hist√≥ria dos sorteios analisados.</p>
                <p><strong>Relev√¢ncia:</strong> Esta combina√ß√£o mais frequente (geralmente "0,1,2,3,4,5,6") representa a sequ√™ncia de d√≠gitos mais recorrente nos sorteios.</p>
            `;
        case 'Maior Intervalo':
            return `
                <h4>Maior Intervalo</h4>
                <p><strong>O que significa:</strong> O maior "tempo de espera" observado entre duas apari√ß√µes consecutivas da mesma combina√ß√£o de d√≠gitos foi de X concursos.</p>
                <p><strong>Interpreta√ß√£o:</strong> Alguma combina√ß√£o espec√≠fica apareceu em um concurso e s√≥ voltou a aparecer muitos concursos depois.</p>
                <p><strong>Relev√¢ncia:</strong> Este valor extremo mostra como algumas combina√ß√µes podem demorar muito para se repetir, destacando a variabilidade dos intervalos de repeti√ß√£o.</p>
            `;
        default:
            return `<p>Informa√ß√µes estat√≠sticas sobre a frequ√™ncia de apari√ß√£o dos d√≠gitos nos sorteios da Mega-Sena.</p>`;
    }
}

// Fun√ß√£o para obter explica√ß√£o geral das estat√≠sticas
function obterExplicacaoGeral() {
    return `
        <h4>Estat√≠sticas Gerais de Intervalos</h4>
        <p>Esta se√ß√£o apresenta uma vis√£o geral dos padr√µes de intervalo encontrados em todas as combina√ß√µes de d√≠gitos analisadas.</p>
        
        <p>A an√°lise rastreia especificamente as "diferen√ßas" ou "intervalos" entre apari√ß√µes consecutivas das mesmas combina√ß√µes de d√≠gitos.</p>
        
        <p>As estat√≠sticas mostram:</p>
        <ul>
            <li><strong>M√©dia Geral:</strong> Quantos concursos, em m√©dia, entre repeti√ß√µes</li>
            <li><strong>Total de Intervalos:</strong> Quantas observa√ß√µes foram analisadas</li>
            <li><strong>Maior Frequ√™ncia:</strong> Quantas vezes apareceu a combina√ß√£o mais frequente</li>
            <li><strong>Maior Intervalo:</strong> Maior n√∫mero de concursos entre repeti√ß√µes</li>
        </ul>
    `;
}

// Adicionar fun√ß√£o ao carregamento da p√°gina
document.addEventListener('DOMContentLoaded', function() {
    // Esperar um pouco para garantir que a an√°lise de frequ√™ncia j√° foi executada
    setTimeout(adicionarPopupExplicacao, 2000);
});


#highlight-max.js
// Script para destacar valores m√°ximos nas estat√≠sticas
document.addEventListener('DOMContentLoaded', function() {
    console.log("Script de destaque de m√°ximos inicializado");
    
    // Fun√ß√£o para encontrar o valor m√°ximo nas tabelas e destac√°-lo
    function highlightMaxValuesAfterLoading() {
        console.log("Iniciando fun√ß√£o de destaque de valores m√°ximos");
        
        // ===== 1. Destacar frequ√™ncia de d√≠gitos =====
        try {
            // Encontrar todas as caixas de d√≠gitos
            const digitBoxes = document.querySelectorAll('.digit-box');
            console.log(`Encontradas ${digitBoxes.length} caixas de d√≠gitos`);
            
            if (digitBoxes.length > 0) {
                // Encontrar o maior valor
                let maxValue = 0;
                let maxBox = null;
                
                digitBoxes.forEach(box => {
                    const countSpan = box.querySelector('.digit-count');
                    if (countSpan) {
                        const value = parseInt(countSpan.textContent);
                        if (!isNaN(value) && value > maxValue) {
                            maxValue = value;
                            maxBox = box;
                        }
                    }
                });
                
                // Aplicar destaque
                if (maxBox) {
                    console.log(`Valor m√°ximo encontrado: ${maxValue}`);
                    maxBox.style.backgroundColor = '#d9534f';
                    maxBox.style.transform = 'scale(1.1)';
                    maxBox.style.boxShadow = '0 0 8px rgba(217, 83, 79, 0.7)';
                    
                    const countSpan = maxBox.querySelector('.digit-count');
                    if (countSpan) {
                        countSpan.style.fontWeight = 'bold';
                        countSpan.style.color = '#fff';
                    }
                }
            }
        } catch (error) {
            console.error("Erro ao destacar frequ√™ncia de d√≠gitos:", error);
        }
        
        // ===== 2. Destacar gr√°fico de frequ√™ncia =====
        try {
            const chartRows = document.querySelectorAll('#digitChart > div');
            console.log(`Encontradas ${chartRows.length} linhas no gr√°fico`);
            
            if (chartRows.length > 0) {
                let maxValue = 0;
                let maxRow = null;
                
                chartRows.forEach(row => {
                    const valueDiv = row.querySelector('div > div:last-child');
                    if (valueDiv) {
                        const value = parseInt(valueDiv.textContent);
                        if (!isNaN(value) && value > maxValue) {
                            maxValue = value;
                            maxRow = row;
                        }
                    }
                });
                
                if (maxRow) {
                    console.log(`Valor m√°ximo no gr√°fico: ${maxValue}`);
                    maxRow.style.backgroundColor = 'rgba(217, 83, 79, 0.15)';
                    
                    // Destacar a barra
                    const bar = maxRow.querySelector('div > div > div');
                    if (bar) {
                        bar.style.backgroundColor = '#d9534f';
                    }
                    
                    // Destacar o valor
                    const valueDiv = maxRow.querySelector('div > div:last-child');
                    if (valueDiv) {
                        valueDiv.style.color = '#d9534f';
                        valueDiv.style.fontWeight = 'bold';
                    }
                }
            }
        } catch (error) {
            console.error("Erro ao destacar gr√°fico de frequ√™ncia:", error);
        }
        
        // ===== 3. Destacar tabelas =====
        try {
            // Combina√ß√µes mais frequentes - coluna de frequ√™ncia √© a 3¬™ (√≠ndice 2)
            highlightMaxValueInTable('table.combinations-table', 2);
            
            // Resumo por quantidade de d√≠gitos - coluna de n√∫mero de sorteios √© a 2¬™ (√≠ndice 1)
            highlightMaxValueInTable('table.summary-table', 1);
            
            // Modal de combina√ß√µes similares - coluna de frequ√™ncia √© a 4¬™ (√≠ndice 3)
            const modalTable = document.querySelector('.similares-table');
            if (modalTable) {
                highlightMaxValueInTable('.similares-table', 3);
            }
        } catch (error) {
            console.error("Erro ao destacar tabelas:", error);
        }
    }
    
    // Fun√ß√£o auxiliar para destacar o valor m√°ximo em uma tabela
    function highlightMaxValueInTable(selector, columnIndex) {
        const table = document.querySelector(selector);
        if (!table) {
            console.log(`Tabela n√£o encontrada: ${selector}`);
            return;
        }
        
        const rows = table.querySelectorAll('tbody tr');
        if (rows.length === 0) {
            console.log(`Nenhuma linha encontrada na tabela ${selector}`);
            return;
        }
        
        console.log(`Analisando ${rows.length} linhas na tabela ${selector}`);
        
        let maxValue = 0;
        let maxRow = null;
        
        rows.forEach(row => {
            if (row.cells.length <= columnIndex) return;
            
            const cell = row.cells[columnIndex];
            const value = parseInt(cell.textContent.replace(/\D/g, ''));
            
            if (!isNaN(value) && value > maxValue) {
                maxValue = value;
                maxRow = row;
            }
        });
        
        if (maxRow) {
            console.log(`Valor m√°ximo na tabela ${selector}: ${maxValue}`);
            
            // Destacar a linha inteira
            maxRow.style.backgroundColor = 'rgba(217, 83, 79, 0.15)';
            
            // Destacar a c√©lula espec√≠fica
            const cell = maxRow.cells[columnIndex];
            cell.style.fontWeight = 'bold';
            cell.style.color = '#d9534f';
            cell.style.fontSize = '110%';
        }
    }
    
    // Configurar o evento do bot√£o de carregamento
    function setupHighlightEvents() {
        const loadButton = document.getElementById('loadButton');
        if (loadButton) {
            console.log("Bot√£o de carregamento encontrado");
            
            // Adicionar o novo handler com nosso c√≥digo
            loadButton.addEventListener('click', function() {
                console.log("Bot√£o de carregar clicado, agendando destaque");
                // Aguardar o carregamento dos dados (2 segundos deve ser suficiente)
                setTimeout(highlightMaxValuesAfterLoading, 2000);
            });
            
            // Verificar se j√° existem dados carregados
            setTimeout(highlightMaxValuesAfterLoading, 1000);
        } else {
            console.warn("Bot√£o de carregamento n√£o encontrado!");
            // Tentar novamente em 1 segundo
            setTimeout(setupHighlightEvents, 1000);
        }
    }
    
    // Iniciar a configura√ß√£o
    setupHighlightEvents();
    
    // Adicionar CSS necess√°rio
    const style = document.createElement('style');
    style.textContent = `
        /* Estilo para elementos destacados */
        .highlighted-max {
            transition: all 0.3s ease;
        }
    `;
    document.head.appendChild(style);
});


#popup-explicacao.js
// Vari√°vel global para controlar a visibilidade dos √≠cones
let iconesMostrados = false;
let botoesInfo = [];

// Fun√ß√£o para adicionar/remover bot√µes de informa√ß√£o
function alternarBotoesInformacao() {
    console.log("Alternando bot√µes de informa√ß√£o...");
    
    if (iconesMostrados) {
        // Esconder/remover os √≠cones
        botoesInfo.forEach(botao => {
            botao.style.display = 'none';
        });
        
        document.querySelectorAll('.explicacao-popup').forEach(popup => {
            popup.style.display = 'none';
        });
        
        iconesMostrados = false;
        
        // Atualizar texto do bot√£o
        const botaoExplicacao = document.getElementById('botao-explicacao');
        if (botaoExplicacao) {
            botaoExplicacao.textContent = 'Mostrar Explica√ß√µes';
        }
        
        console.log("√çcones de informa√ß√£o ocultados");
    } else {
        // Limpar qualquer bot√£o existente
        botoesInfo.forEach(botao => {
            botao.style.display = 'inline-block';
        });
        
        // Se ainda n√£o tiver criado, criar os bot√µes
        if (botoesInfo.length === 0) {
            // Adicionar bot√£o na se√ß√£o de estat√≠sticas gerais
            const estatisticasTitle = document.querySelector('.estatisticas-gerais h3');
            if (estatisticasTitle) {
                const botao = adicionarBotaoInfo(estatisticasTitle, getExplicacaoGeral());
                botoesInfo.push(botao);
            }
            
            // Adicionar bot√µes em cada caixa de estat√≠stica
            const statBoxes = document.querySelectorAll('.stat-box');
            statBoxes.forEach(box => {
                const titulo = box.querySelector('.stat-title');
                if (titulo) {
                    const textoTitulo = titulo.textContent.trim();
                    const botao = adicionarBotaoInfo(titulo, getExplicacaoPara(textoTitulo));
                    botoesInfo.push(botao);
                }
            });
        }
        
        iconesMostrados = true;
        
        // Atualizar texto do bot√£o
        const botaoExplicacao = document.getElementById('botao-explicacao');
        if (botaoExplicacao) {
            botaoExplicacao.textContent = 'Ocultar Explica√ß√µes';
        }
        
        console.log("√çcones de informa√ß√£o mostrados");
    }
}

// Fun√ß√£o para adicionar bot√£o de informa√ß√£o a um elemento
function adicionarBotaoInfo(elemento, textoExplicacao) {
    // Verificar se j√° existe um bot√£o
    let botaoInfo = elemento.querySelector('.info-icon');
    
    if (!botaoInfo) {
        botaoInfo = document.createElement('span');
        botaoInfo.className = 'info-icon';
        botaoInfo.innerHTML = 'i';
        elemento.appendChild(botaoInfo);
        
        // Criar popup
        const popup = document.createElement('div');
        popup.className = 'explicacao-popup';
        popup.innerHTML = textoExplicacao;
        document.body.appendChild(popup);
        
        // Adicionar eventos
        botaoInfo.addEventListener('click', function(e) {
            e.stopPropagation();
            console.log("√çcone de informa√ß√£o clicado!");
            
            // Fechar todos os outros popups
            document.querySelectorAll('.explicacao-popup').forEach(p => {
                if (p !== popup) {
                    p.style.display = 'none';
                }
            });
            
            // Alternar visibilidade deste popup
            if (popup.style.display === 'block') {
                popup.style.display = 'none';
            } else {
                // Posicionar e mostrar este popup
                const rect = botaoInfo.getBoundingClientRect();
                popup.style.left = (rect.left - 200 + rect.width/2) + 'px'; // Centralizar
                popup.style.top = (rect.bottom + 10) + 'px';
                popup.style.display = 'block';
                
                console.log("Popup exibido em:", popup.style.left, popup.style.top);
            }
        });
        
        // Fechar ao clicar fora
        document.addEventListener('click', function(e) {
            if (e.target !== botaoInfo && !popup.contains(e.target)) {
                popup.style.display = 'none';
            }
        });
    }
    
    return botaoInfo;
}

// Textos de explica√ß√£o (mantidos os mesmos)
function getExplicacaoGeral() {
    return `
        <h4>Estat√≠sticas Gerais de Intervalos</h4>
        <p>Esta se√ß√£o apresenta uma vis√£o geral dos padr√µes de intervalo encontrados em todas as combina√ß√µes de d√≠gitos analisadas.</p>
        
        <p>A an√°lise rastreia especificamente as "diferen√ßas" ou "intervalos" entre apari√ß√µes consecutivas das mesmas combina√ß√µes de d√≠gitos.</p>
        
        <p>As estat√≠sticas mostram:</p>
        <ul>
            <li><strong>M√©dia Geral:</strong> Quantos concursos, em m√©dia, entre repeti√ß√µes</li>
            <li><strong>Total de Intervalos:</strong> Quantas observa√ß√µes foram analisadas</li>
            <li><strong>Maior Frequ√™ncia:</strong> Quantas vezes apareceu a combina√ß√£o mais frequente</li>
            <li><strong>Maior Intervalo:</strong> Maior n√∫mero de concursos entre repeti√ß√µes</li>
        </ul>
    `;
}

function getExplicacaoPara(titulo) {
    switch (titulo) {
        case 'M√©dia Geral':
            return `
                <h4>M√©dia Geral de Intervalos</h4>
                <p><strong>O que significa:</strong> Em m√©dia, uma mesma combina√ß√£o espec√≠fica de d√≠gitos reaparece a cada X concursos.</p>
                <p><strong>Interpreta√ß√£o:</strong> Este valor √© calculado somando todos os intervalos detectados entre apari√ß√µes repetidas de todas as combina√ß√µes de d√≠gitos e dividindo pelo n√∫mero total de intervalos. √â uma medida da "frequ√™ncia m√©dia" com que os padr√µes se repetem.</p>
                <p><strong>Relev√¢ncia:</strong> Um valor alto indica que as combina√ß√µes de d√≠gitos tendem a demorar muitos concursos para se repetir, o que √© esperado em um sorteio aleat√≥rio.</p>
            `;
        case 'Total de Intervalos':
            return `
                <h4>Total de Intervalos Analisados</h4>
                <p><strong>O que significa:</strong> Foram detectados X casos onde uma combina√ß√£o de d√≠gitos apareceu e depois reapareceu em um concurso posterior.</p>
                <p><strong>Interpreta√ß√£o:</strong> Cada intervalo representa uma observa√ß√£o de quanto tempo (em n√∫mero de concursos) uma combina√ß√£o levou para reaparecer.</p>
                <p><strong>Relev√¢ncia:</strong> Quanto maior este n√∫mero, mais dados a an√°lise possui, tornando as estat√≠sticas mais confi√°veis.</p>
            `;
        case 'Maior Frequ√™ncia':
            return `
                <h4>Maior Frequ√™ncia</h4>
                <p><strong>O que significa:</strong> A combina√ß√£o de d√≠gitos mais comum apareceu em X concursos diferentes.</p>
                <p><strong>Interpreta√ß√£o:</strong> Este valor mostra a combina√ß√£o de d√≠gitos que mais se repetiu na hist√≥ria dos sorteios analisados.</p>
                <p><strong>Relev√¢ncia:</strong> Esta combina√ß√£o mais frequente (geralmente "0,1,2,3,4,5,6") representa a sequ√™ncia de d√≠gitos mais recorrente nos sorteios.</p>
            `;
        case 'Maior Intervalo':
            return `
                <h4>Maior Intervalo</h4>
                <p><strong>O que significa:</strong> O maior "tempo de espera" observado entre duas apari√ß√µes consecutivas da mesma combina√ß√£o de d√≠gitos foi de X concursos.</p>
                <p><strong>Interpreta√ß√£o:</strong> Alguma combina√ß√£o espec√≠fica apareceu em um concurso e s√≥ voltou a aparecer muitos concursos depois.</p>
                <p><strong>Relev√¢ncia:</strong> Este valor extremo mostra como algumas combina√ß√µes podem demorar muito para se repetir, destacando a variabilidade dos intervalos de repeti√ß√£o.</p>
            `;
        default:
            return `<p>Informa√ß√µes estat√≠sticas sobre a frequ√™ncia de apari√ß√£o dos d√≠gitos nos sorteios da Mega-Sena.</p>`;
    }
}

// Adicionar bot√£o expl√≠cito para ativar as explica√ß√µes
function adicionarBotaoExplicacao() {
    const estatisticasGerais = document.querySelector('.estatisticas-gerais');
    if (estatisticasGerais) {
        // Verificar se o bot√£o j√° existe
        let botaoExplicacao = document.getElementById('botao-explicacao');
        
        if (!botaoExplicacao) {
            botaoExplicacao = document.createElement('button');
            botaoExplicacao.id = 'botao-explicacao';
            botaoExplicacao.textContent = 'Mostrar Explica√ß√µes';
            botaoExplicacao.className = 'button';
            botaoExplicacao.style.marginTop = '10px';
            botaoExplicacao.style.marginBottom = '10px';
            botaoExplicacao.style.display = 'block';
            
            botaoExplicacao.addEventListener('click', function() {
                console.log("Bot√£o de explica√ß√µes clicado");
                alternarBotoesInformacao();
            });
            
            estatisticasGerais.appendChild(botaoExplicacao);
        }
    }
}

// Fun√ß√£o principal que ser√° executada quando a p√°gina carregar
function inicializarPopups() {
    console.log("Inicializando sistema de explica√ß√µes...");
    
    // Adicionar estilo ao documento
    const style = document.createElement('style');
    style.textContent = `
        .info-icon {
            display: inline-block;
            width: 18px;
            height: 18px;
            border-radius: 50%;
            background-color: #4CAF50;
            color: white;
            text-align: center;
            line-height: 18px;
            font-size: 12px;
            font-weight: bold;
            margin-left: 5px;
            cursor: pointer;
            position: relative;
            z-index: 10;
        }
        
        .explicacao-popup {
            display: none;
            position: fixed;
            background-color: white;
            border: 1px solid #ddd;
            border-radius: 5px;
            padding: 15px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.2);
            z-index: 1000;
            max-width: 400px;
            min-width: 300px;
            font-size: 14px;
            line-height: 1.5;
        }
        
        .explicacao-popup h4 {
            margin-top: 0;
            color: #4CAF50;
        }
        
        .explicacao-popup ul {
            padding-left: 20px;
        }
        
        .explicacao-popup p {
            margin: 10px 0;
        }
    `;
    document.head.appendChild(style);
    
    // Verificar periodicamente se a se√ß√£o de estat√≠sticas j√° foi carregada
    const checkExist = setInterval(function() {
        const estatisticasGerais = document.querySelector('.estatisticas-gerais');
        if (estatisticasGerais) {
            console.log("Se√ß√£o de estat√≠sticas encontrada!");
            clearInterval(checkExist);
            adicionarBotaoExplicacao();
        }
    }, 1000); // Verificar a cada segundo
}

// Iniciar quando o documento estiver pronto
document.addEventListener('DOMContentLoaded', inicializarPopups);



#resumo-simples.js
// Solu√ß√£o simplificada para adicionar bot√£o e gerar resumo

// Adicionar o bot√£o quando a p√°gina carregar
document.addEventListener('DOMContentLoaded', function() {
    console.log("Script de resumo simplificado carregado");
    
    // Fun√ß√£o que adiciona o bot√£o
    function adicionarBotao() {
        // Verificar se o bot√£o j√° existe
        if (document.getElementById('botaoAnalisarFrequencias')) {
            return;
        }
        
        // Criar o bot√£o
        const botao = document.createElement('button');
        botao.id = 'botaoAnalisarFrequencias';
        botao.className = 'button';
        botao.textContent = 'Resumo';
        
        // Adicionar evento de clique
        botao.addEventListener('click', function() {
            console.log("Bot√£o clicado - gerando resumo");
            gerarResumo();
        });
        
        // Encontrar um local para adicionar o bot√£o
        const actionsContainer = document.querySelector('.actions');
        if (actionsContainer) {
            actionsContainer.appendChild(botao);
            console.log("Bot√£o adicionado √† se√ß√£o .actions");
        } else {
            // Alternativa: adicionar antes da tabela
            const tabela = document.getElementById('diaDeSorteResults');
            if (tabela) {
                const div = document.createElement('div');
                div.className = 'actions';
                div.style.textAlign = 'center';
                div.style.margin = '20px 0';
                div.appendChild(botao);
                
                tabela.parentNode.insertBefore(div, tabela);
                console.log("Bot√£o adicionado antes da tabela");
            } else {
                console.log("N√£o foi poss√≠vel encontrar um local para o bot√£o");
            }
        }
    }
    
    // Adicionar o bot√£o ap√≥s um tempo para garantir que a p√°gina carregou
    setTimeout(adicionarBotao, 1000);
    
    // Tentar adicionar novamente quando a mensagem de carregamento completado aparecer
    const verificarCarregamento = setInterval(function() {
        const mensagemCompletada = document.getElementById('completedMessage');
        if (mensagemCompletada && getComputedStyle(mensagemCompletada).display !== 'none') {
            console.log("Carregamento completado detectado");
            adicionarBotao();
            clearInterval(verificarCarregamento);
        }
    }, 1000);
    
    // Limitar a verifica√ß√£o a 20 segundos
    setTimeout(function() {
        clearInterval(verificarCarregamento);
    }, 20000);
});

// Fun√ß√£o para gerar o resumo
function gerarResumo() {
    console.log("In√≠cio da gera√ß√£o do resumo");
    
    // Remover resumo anterior, se existir
    const resumoAnterior = document.getElementById('resumo');
    if (resumoAnterior) {
        resumoAnterior.remove();
        console.log("Resumo anterior removido");
    }
    
    // Criar o resumo
    const resumo = document.createElement('div');
    resumo.id = 'resumo';
    resumo.style.margin = '30px 0';
    resumo.style.padding = '20px';
    resumo.style.backgroundColor = '#f9f9f9';
    resumo.style.borderRadius = '8px';
    resumo.style.border = '2px solid #673AB7';
    resumo.style.boxShadow = '0 4px 8px rgba(0,0,0,0.1)';
    
    // Valores padr√£o atualizados com base na tabela fornecida
    let combinacao = '0,1,2,3,5,7,9';
    let frequencia = 22;
    let intervaloMedio = 41;  // Corrigido de 13 para 41
    let menorIntervalo = 3;   // Corrigido de 1 para 3
    let maiorIntervalo = 121; // Corrigido de 38 para 121
    let ultimoIntervalo = 38; // Corrigido de 13 para 38
    
    // Tentar extrair dados reais da tabela
    try {
        console.log("Tentando extrair dados da tabela de combina√ß√µes");
        const tabelaCombinacoes = document.querySelector('.combinations-table');
        
        if (tabelaCombinacoes) {
            console.log("Tabela de combina√ß√µes encontrada");
            const linhasTabela = tabelaCombinacoes.querySelectorAll('tbody tr');
            
            if (linhasTabela && linhasTabela.length > 0) {
                console.log(`Encontradas ${linhasTabela.length} linhas na tabela`);
                
                // Pegar a primeira linha (combina√ß√£o mais frequente)
                const primeiraLinha = linhasTabela[0];
                const colunas = primeiraLinha.querySelectorAll('td');
                
                console.log(`Colunas na primeira linha: ${colunas.length}`);
                
                if (colunas.length >= 7) {
                    // Extrair valores espec√≠ficos de cada coluna
                    combinacao = colunas[0].textContent.trim();
                    frequencia = parseInt(colunas[2].textContent) || frequencia;
                    intervaloMedio = parseInt(colunas[3].textContent) || intervaloMedio;
                    menorIntervalo = parseInt(colunas[4].textContent) || menorIntervalo;
                    maiorIntervalo = parseInt(colunas[5].textContent) || maiorIntervalo;
                    ultimoIntervalo = parseInt(colunas[6].textContent) || ultimoIntervalo;
                    
                    console.log("Dados extra√≠dos com sucesso da tabela:");
                    console.log(`Combina√ß√£o: ${combinacao}`);
                    console.log(`Frequ√™ncia: ${frequencia}`);
                    console.log(`Intervalo M√©dio: ${intervaloMedio}`);
                    console.log(`Menor Intervalo: ${menorIntervalo}`);
                    console.log(`Maior Intervalo: ${maiorIntervalo}`);
                    console.log(`√öltimo Intervalo: ${ultimoIntervalo}`);
                } else {
                    console.log(`N√∫mero insuficiente de colunas: ${colunas.length}, esperado pelo menos 7`);
                }
            } else {
                console.log("Nenhuma linha encontrada na tabela");
            }
        } else {
            console.log("Tabela de combina√ß√µes n√£o encontrada");
        }
    } catch (e) {
        console.error("Erro ao extrair dados da tabela:", e);
    }
    
    // Conte√∫do do resumo
    resumo.innerHTML = `
    <h2 style="color: rebeccapurple;">RESUMO GERAL</h2>
    <p>A an√°lise dos dados mostra que a combina√ß√£o <strong>${combinacao}</strong> apareceu <strong>${frequencia} vezes</strong> nos concursos do Dia de Sorte, com um intervalo m√©dio de <strong>${intervaloMedio} concursos</strong> entre suas apari√ß√µes. A menor sequ√™ncia entre ocorr√™ncias foi de apenas <strong>${menorIntervalo} concursos</strong>, e a maior chegou a <strong>${maiorIntervalo} concursos</strong>.</p>
    
    <h2 style="color: red;">Estrat√©gia de Aposta Recomendada:</h2>
    
    <ol>
        <li>
            <strong>Acompanhar o Intervalo M√©dio</strong>
            <p>Como a m√©dia entre apari√ß√µes √© de <strong>${intervaloMedio} concursos</strong>, um bom momento para apostar nessa sequ√™ncia seria quando ela j√° estiver sem sair por algo pr√≥ximo a esse n√∫mero de concursos.</p>
        </li>
        <li>
            <strong>Apostar com Maior Frequ√™ncia quando o Intervalo Estiver Pr√≥ximo da M√©dia</strong>
            <p>Se o intervalo entre as apari√ß√µes da sequ√™ncia atingir <strong>${Math.floor(intervaloMedio * 0.8)} a ${Math.ceil(intervaloMedio * 1.2)} concursos</strong>, pode ser um bom indicativo de que ela tem uma boa chance de sair.</p>
        </li>
        <li>
            <strong>Monitorar o √öltimo Intervalo</strong>
            <p>O √∫ltimo intervalo registrado foi de <strong>${ultimoIntervalo} concursos</strong>, o que indica que pode haver uma tend√™ncia de repeti√ß√£o em per√≠odos mais curtos.</p>
        </li>
        <li>
            <strong>Variar os N√∫meros Dentro da Combina√ß√£o</strong>
            <p>Algumas combina√ß√µes semelhantes (ex.: trocando o n√∫mero <strong>9 por 6 ou 8</strong>) tamb√©m aparecem frequentemente. Fazer apostas variando um ou dois n√∫meros pode aumentar as chances.</p>
        </li>
        <li>
            <strong>Evitar Apostar Quando a Sequ√™ncia Saiu Recentemente</strong>
            <p>Se essa sequ√™ncia apareceu nos √∫ltimos <strong>5 a 10 concursos</strong>, a chance de repeti√ß√£o imediata pode ser menor.</p>
        </li>
    </ol>
    
    <h2>Conclus√£o:</h2>
    
    <p>Se a combina√ß√£o <strong>${combinacao}</strong> estiver sem aparecer por <strong>${intervaloMedio} concursos ou mais</strong>, pode valer a pena apostar nela ou em varia√ß√µes pr√≥ximas. Caso tenha sa√≠do recentemente, melhor esperar mais alguns concursos antes de apostar nessa combina√ß√£o novamente.</p>
    
    <p>Esta an√°lise √© baseada em padr√µes hist√≥ricos e n√£o garante resultados futuros. O Dia de Sorte √© um jogo de sorte com resultados aleat√≥rios.</p>
`;

    
    // Adicionar o resumo √† p√°gina
    const botao = document.getElementById('botaoAnalisarFrequencias');
    if (botao) {
        // Adicionar ap√≥s o container do bot√£o
        const container = botao.closest('.actions');
        if (container) {
            container.parentNode.insertBefore(resumo, container.nextSibling);
        } else {
            botao.parentNode.insertBefore(resumo, botao.nextSibling);
        }
    } else {
        // Adicionar antes da tabela se o bot√£o n√£o for encontrado
        const tabela = document.getElementById('diaDeSorteResults');
        if (tabela) {
            tabela.parentNode.insertBefore(resumo, tabela);
        } else {
            // √öltima op√ß√£o: adicionar ao final do container principal
            const container = document.querySelector('.container');
            if (container) {
                container.appendChild(resumo);
            } else {
                console.error("N√£o foi poss√≠vel encontrar um local para inserir o resumo");
                alert("N√£o foi poss√≠vel exibir o resumo. Verifique o console para mais detalhes.");
                return;
            }
        }
    }
    
    // Rolar at√© o resumo
    resumo.scrollIntoView({ behavior: 'smooth' });
    
    console.log("Resumo gerado com sucesso");
}



#script.js
document.addEventListener('DOMContentLoaded', function() {
    const loadButton = document.getElementById('loadButton');
    const downloadCSVButton = document.getElementById('downloadCSV');
    const downloadJSONButton = document.getElementById('downloadJSON');
    const downloadTXTButton = document.getElementById('downloadTXT');
    
    let allResults = [];
    let filteredResults = [];
    let digitStats = {};
    let combinationStats = {};
    
    // Registrar eventos de clique
    loadButton.addEventListener('click', fetchDigitosResults);
    downloadCSVButton.addEventListener('click', downloadCSV);
    downloadJSONButton.addEventListener('click', downloadJSON);
    downloadTXTButton.addEventListener('click', downloadTXT);
	
	
	// Chamar fetchDigitosResults automaticamente quando a p√°gina carregar
    fetchDigitosResults();
    
    // Fun√ß√£o para buscar os resultados - com tratamento de erros melhorado
    async function fetchDigitosResults() {
		// No in√≠cio da fun√ß√£o fetchDigitosResults
		console.log("Fun√ß√£o fetchDigitosResults iniciada");
		
		const loadButton = document.getElementById('loadButton');

		// Desabilitar o bot√£o enquanto carrega
		if (loadButton) {
			loadButton.disabled = true;
			loadButton.style.opacity = '0.6';
			loadButton.style.cursor = 'not-allowed';
		}
		
        const loadingMessage = document.getElementById('loadingMessage');
        const completedMessage = document.getElementById('completedMessage');
        const tableBody = document.getElementById('diaDeSorteResults').getElementsByTagName('tbody')[0];
        const digitFrequencyDiv = document.getElementById('digitFrequency');
        const digitChartDiv = document.getElementById('digitChart');
        const combinationAnalysisDiv = document.getElementById('combinationAnalysis');
        const filterContainerDiv = document.getElementById('filterContainer');
        
        loadingMessage.style.display = 'block';
        completedMessage.style.display = 'none';
        tableBody.innerHTML = '';
        digitFrequencyDiv.innerHTML = '';
        digitChartDiv.innerHTML = '';
        combinationAnalysisDiv.innerHTML = '';
        filterContainerDiv.innerHTML = '';
        
        try {
            console.log("Iniciando fetch de dados...");
            const response = await fetch('/api/digitos');
            console.log("Status da resposta:", response.status);
            
            if (!response.ok) {
                const errorText = await response.text();
                console.error("Erro na resposta:", errorText);
                throw new Error(`Erro ao acessar a API. Status: ${response.status}`);
            }
            
            const data = await response.json();
            console.log("Dados recebidos:", data);
            
            if (data.resultados && Array.isArray(data.resultados)) {
                allResults = data.resultados;
				// Compartilhar resultados no escopo global
				window.allResults = allResults;
				window.digitStats = digitStats;
				
				
                filteredResults = [...allResults]; // Inicialmente, todos os resultados
                digitStats = data.frequencia_digitos;
                
                // Analisar combina√ß√µes de d√≠gitos
                analisarCombinacoes(allResults);
                
                // Renderizar tudo
                renderFilterOptions();
                renderResults(filteredResults);
                renderDigitStats(digitStats);
                renderCombinationAnalysis();
            } else {
                console.error("Formato inv√°lido:", data);
                throw new Error('Formato de dados inv√°lido.');
            }
        } catch (error) {
            console.error("Erro detalhado:", error);
            alert('Erro ao buscar os resultados: ' + error.message);
        } finally {
            loadingMessage.style.display = 'none';
            completedMessage.style.display = 'block';
			
			// Reabilitar o bot√£o quando o carregamento terminar
			if (loadButton) {
				loadButton.disabled = false;
				loadButton.style.opacity = '1';
				loadButton.style.cursor = 'pointer';
			}
        }
    }
    
    // Fun√ß√£o para analisar combina√ß√µes de d√≠gitos
    function analisarCombinacoes(results) {
        combinationStats = {
            porQuantidade: {}, // Agrupar por quantidade de d√≠gitos
            combinacoesFrequentes: {}, // Combina√ß√µes mais frequentes
            digitosExclusivos: {} // D√≠gitos que aparecem apenas em alguns sorteios
        };
        
        // Agrupar resultados por quantidade de d√≠gitos
        results.forEach(result => {
            const qtd = result.contagem_digitos;
            if (!combinationStats.porQuantidade[qtd]) {
                combinationStats.porQuantidade[qtd] = [];
            }
            combinationStats.porQuantidade[qtd].push(result);
        });
        
        // Encontrar combina√ß√µes frequentes
        results.forEach(result => {
            const combinacao = result.digitos_ordenados.join(',');
            if (!combinationStats.combinacoesFrequentes[combinacao]) {
                combinationStats.combinacoesFrequentes[combinacao] = {
                    combinacao: combinacao,
                    concursos: [],
                    digitos: result.digitos_ordenados,
                    quantidade: result.contagem_digitos
                };
            }
            combinationStats.combinacoesFrequentes[combinacao].concursos.push(result.concurso);
        });
        
        // Ordenar combina√ß√µes por frequ√™ncia
        combinationStats.combinacoesFrequentes = Object.values(combinationStats.combinacoesFrequentes)
            .sort((a, b) => b.concursos.length - a.concursos.length);
        
        // Analisar similaridades e diferen√ßas entre combina√ß√µes
        for (let i = 0; i < combinationStats.combinacoesFrequentes.length; i++) {
            const combo = combinationStats.combinacoesFrequentes[i];
            combo.similares = [];
            
            for (let j = 0; j < combinationStats.combinacoesFrequentes.length; j++) {
                if (i === j) continue;
                
                const outroCombo = combinationStats.combinacoesFrequentes[j];
                
                // Comparar os d√≠gitos
                const digitosCombo = new Set(combo.digitos);
                const digitosOutroCombo = new Set(outroCombo.digitos);
                
                // Diferen√ßas
                const digitosExclusivosCombo1 = [...digitosCombo].filter(d => !digitosOutroCombo.has(d));
                const digitosExclusivosCombo2 = [...digitosOutroCombo].filter(d => !digitosCombo.has(d));
                
                // Interse√ß√£o
                const digitosComuns = [...digitosCombo].filter(d => digitosOutroCombo.has(d));
                
                // Se tem similaridade significativa (mais de 70% em comum)
                if (digitosComuns.length >= combo.digitos.length * 0.7) {
                    combo.similares.push({
                        concursos: outroCombo.concursos,
                        digitosComuns: digitosComuns,
                        digitosDiferentes: {
                            de: digitosExclusivosCombo1,
                            para: digitosExclusivosCombo2
                        }
                    });
                }
            }
            
            // Limitar a 5 combina√ß√µes similares por combina√ß√£o
            combo.similares = combo.similares.slice(0, 5);
        }
        
        // Calcular estat√≠sticas adicionais para as combina√ß√µes frequentes
        combinationStats.combinacoesFrequentes.forEach(combo => {
            // Ordenar concursos
            combo.concursos.sort((a, b) => a - b);
            
            // Calcular intervalos
            const intervalos = [];
            for (let i = 1; i < combo.concursos.length; i++) {
                intervalos.push(combo.concursos[i] - combo.concursos[i-1]);
            }
            
            if (intervalos.length > 0) {
                combo.intervalos = intervalos;
                combo.mediaIntervalos = Math.round(intervalos.reduce((a, b) => a + b, 0) / intervalos.length);
                combo.menorIntervalo = Math.min(...intervalos);
                combo.maiorIntervalo = Math.max(...intervalos);
                combo.ultimoIntervalo = intervalos[intervalos.length - 1];
            }
        });
        
        // Limitar as combina√ß√µes mais frequentes √†s top 10
        combinationStats.combinacoesFrequentes = combinationStats.combinacoesFrequentes.slice(0, 10);
        
        // Compartilhar resultados analisados no escopo global para uso pelo resumo-simples.js
        window.resultadosAnalisados = {
            combinacoesOrdenadas: combinationStats.combinacoesFrequentes,
            mediaGeral: combinationStats.combinacoesFrequentes.reduce((acc, c) => acc + (c.mediaIntervalos || 0), 0) / 
                        combinationStats.combinacoesFrequentes.filter(c => c.mediaIntervalos).length
        };
    }
    
    // Fun√ß√£o para renderizar op√ß√µes de filtro
    function renderFilterOptions() {
        const filterContainerDiv = document.getElementById('filterContainer');
        
        // Clear filter container
        filterContainerDiv.innerHTML = '';
        
        // Criar o t√≠tulo
        const filterTitle = document.createElement('h3');
        filterTitle.textContent = 'Filtros';
        filterContainerDiv.appendChild(filterTitle);
        
        // Criar container de filtros
        const filtersDiv = document.createElement('div');
        filtersDiv.className = 'filters';
        
        // 1. Filtro por quantidade de d√≠gitos
        const qtdDigitosDiv = document.createElement('div');
        qtdDigitosDiv.className = 'filter-item';
        
        const qtdDigitosLabel = document.createElement('label');
        qtdDigitosLabel.textContent = 'Qtd. D√≠gitos: ';
        
        const qtdDigitosSelect = document.createElement('select');
        qtdDigitosSelect.id = 'qtdDigitosFilter';
        
        // Op√ß√£o "Todos"
        const optionTodos = document.createElement('option');
        optionTodos.value = '';
        optionTodos.textContent = 'Todos';
        qtdDigitosSelect.appendChild(optionTodos);
        
        // Quantidades dispon√≠veis
        const quantidades = Object.keys(combinationStats.porQuantidade)
            .sort((a, b) => parseInt(a) - parseInt(b));
        
        quantidades.forEach(qtd => {
            const option = document.createElement('option');
            option.value = qtd;
            option.textContent = `${qtd} d√≠gitos (${combinationStats.porQuantidade[qtd].length} resultados)`;
            qtdDigitosSelect.appendChild(option);
        });
        
        qtdDigitosDiv.appendChild(qtdDigitosLabel);
        qtdDigitosDiv.appendChild(qtdDigitosSelect);
        
        // 2. Filtro por d√≠gito espec√≠fico
        const digitoEspecificoDiv = document.createElement('div');
        digitoEspecificoDiv.className = 'filter-item';
        
        const digitoEspecificoLabel = document.createElement('label');
        digitoEspecificoLabel.textContent = 'Cont√©m D√≠gito: ';
        
        const digitoEspecificoSelect = document.createElement('select');
        digitoEspecificoSelect.id = 'digitoEspecificoFilter';
        
        // Op√ß√£o "Todos"
        const optionTodosDigitos = document.createElement('option');
        optionTodosDigitos.value = '';
        optionTodosDigitos.textContent = 'Todos';
        digitoEspecificoSelect.appendChild(optionTodosDigitos);
        
        // Listar todos os d√≠gitos ordenados por frequ√™ncia
        const digitosPorFrequencia = Object.entries(digitStats)
            .sort((a, b) => b[1] - a[1]);
        
        digitosPorFrequencia.forEach(([digito, frequencia]) => {
            const option = document.createElement('option');
            option.value = digito;
            option.textContent = `D√≠gito ${digito} (${frequencia} ocorr√™ncias)`;
            digitoEspecificoSelect.appendChild(option);
        });
        
        digitoEspecificoDiv.appendChild(digitoEspecificoLabel);
        digitoEspecificoDiv.appendChild(digitoEspecificoSelect);
        
        // 3. Bot√£o de aplicar filtro
        const aplicarFiltroBtn = document.createElement('button');
        aplicarFiltroBtn.textContent = 'Aplicar Filtros';
        aplicarFiltroBtn.className = 'button';
        aplicarFiltroBtn.onclick = aplicarFiltros;
        
        // 4. Bot√£o de limpar filtro
        const limparFiltroBtn = document.createElement('button');
        limparFiltroBtn.textContent = 'Limpar Filtros';
        limparFiltroBtn.className = 'button';
        limparFiltroBtn.onclick = limparFiltros;
        
        // Adicionar todos os elementos ao container
        filtersDiv.appendChild(qtdDigitosDiv);
        filtersDiv.appendChild(digitoEspecificoDiv);
        filtersDiv.appendChild(aplicarFiltroBtn);
        filtersDiv.appendChild(limparFiltroBtn);
        
        filterContainerDiv.appendChild(filtersDiv);
    }
    
    // Fun√ß√£o para aplicar filtros
    function aplicarFiltros() {
        const qtdDigitosFilter = document.getElementById('qtdDigitosFilter').value;
        const digitoEspecificoFilter = document.getElementById('digitoEspecificoFilter').value;
        
        filteredResults = [...allResults]; // Reiniciar com todos os resultados
        
        // Aplicar filtro de quantidade de d√≠gitos
        if (qtdDigitosFilter) {
            filteredResults = filteredResults.filter(
                result => result.contagem_digitos == parseInt(qtdDigitosFilter)
            );
        }
        
        // Aplicar filtro de d√≠gito espec√≠fico
        if (digitoEspecificoFilter) {
            filteredResults = filteredResults.filter(
                result => result.digitos_ordenados.includes(digitoEspecificoFilter)
            );
        }
        
        // Renderizar resultados filtrados
        renderResults(filteredResults);
        
        // Atualizar mensagem de resultados
        const resultadosInfo = document.getElementById('resultadosInfo');
        if (resultadosInfo) {
            resultadosInfo.textContent = `Exibindo ${filteredResults.length} de ${allResults.length} resultados`;
        }
    }
    
    // Fun√ß√£o para limpar filtros
    function limparFiltros() {
        document.getElementById('qtdDigitosFilter').value = '';
        document.getElementById('digitoEspecificoFilter').value = '';
        
        filteredResults = [...allResults]; // Reiniciar com todos os resultados
        renderResults(filteredResults);
        
        // Atualizar mensagem de resultados
        const resultadosInfo = document.getElementById('resultadosInfo');
        if (resultadosInfo) {
            resultadosInfo.textContent = `Exibindo ${filteredResults.length} de ${allResults.length} resultados`;
        }
    }
    
    // Fun√ß√£o para renderizar a an√°lise de combina√ß√µes
    function renderCombinationAnalysis() {
        const combinationAnalysisDiv = document.getElementById('combinationAnalysis');
        
        // T√≠tulo da se√ß√£o
        const title = document.createElement('h3');
        title.textContent = 'An√°lise de Combina√ß√µes de D√≠gitos';
        combinationAnalysisDiv.appendChild(title);
        
        // 1. Combina√ß√µes mais frequentes
        const combinacoesFrequentesTitle = document.createElement('h4');
        combinacoesFrequentesTitle.textContent = 'Combina√ß√µes Mais Frequentes';
        combinationAnalysisDiv.appendChild(combinacoesFrequentesTitle);
        
        const combinacoesTable = document.createElement('table');
        combinacoesTable.className = 'combinations-table';
        
		// Cabe√ßalho da tabela
		const headerRow = document.createElement('tr');
		[
			'Combina√ß√£o', 
			'Qtd. D√≠gitos', 
			'Frequ√™ncia', 
			'Detalhes'
		].forEach(text => {
			const th = document.createElement('th');
			th.textContent = text;
			headerRow.appendChild(th);
		});        combinacoesTable.appendChild(headerRow);
        
        // Dados da tabela
        combinationStats.combinacoesFrequentes.forEach(combo => {
            const row = document.createElement('tr');
            
            // Combina√ß√£o
            const tdCombo = document.createElement('td');
            tdCombo.textContent = combo.digitos.join(',');
            row.appendChild(tdCombo);
            
            // Quantidade de d√≠gitos
            const tdQtd = document.createElement('td');
            tdQtd.textContent = combo.quantidade;
            row.appendChild(tdQtd);
            
            // Frequ√™ncia (n√∫mero de concursos)
            const tdFreq = document.createElement('td');
            tdFreq.textContent = combo.concursos.length;
            row.appendChild(tdFreq);
            
            // Bot√£o para ver detalhes
            const tdDetails = document.createElement('td');
            const detailsBtn = document.createElement('button');
            detailsBtn.textContent = 'Ver Detalhes';
            detailsBtn.className = 'details-button';
            detailsBtn.onclick = () => {
                mostrarDetalhesCombinacao(combo);
            };
            tdDetails.appendChild(detailsBtn);
            row.appendChild(tdDetails);
            
            combinacoesTable.appendChild(row);
        });
        
        combinationAnalysisDiv.appendChild(combinacoesTable);
        
        // 2. Resumo por quantidade de d√≠gitos
        const resumoQtdTitle = document.createElement('h4');
        resumoQtdTitle.textContent = 'Resumo por Quantidade de D√≠gitos';
        combinationAnalysisDiv.appendChild(resumoQtdTitle);
        
        const resumoTable = document.createElement('table');
        resumoTable.className = 'summary-table';
        
        // Cabe√ßalho da tabela
        const resumoHeader = document.createElement('tr');
        ['Qtd. D√≠gitos', 'N√∫mero de Sorteios', 'Porcentagem'].forEach(text => {
            const th = document.createElement('th');
            th.textContent = text;
            resumoHeader.appendChild(th);
        });
        resumoTable.appendChild(resumoHeader);
        
        // Dados da tabela
        const qtdKeys = Object.keys(combinationStats.porQuantidade)
            .sort((a, b) => parseInt(a) - parseInt(b));
        
        qtdKeys.forEach(qtd => {
            const row = document.createElement('tr');
            
            // Quantidade de d√≠gitos
            const tdQtd = document.createElement('td');
            tdQtd.textContent = qtd;
            row.appendChild(tdQtd);
            
            // N√∫mero de sorteios
            const count = combinationStats.porQuantidade[qtd].length;
            const tdCount = document.createElement('td');
            tdCount.textContent = count;
            row.appendChild(tdCount);
            
            // Porcentagem
            const percentage = ((count / allResults.length) * 100).toFixed(2);
            const tdPercentage = document.createElement('td');
            tdPercentage.textContent = `${percentage}%`;
            row.appendChild(tdPercentage);
            
            resumoTable.appendChild(row);
        });
        
        combinationAnalysisDiv.appendChild(resumoTable);
    }
    
    // Fun√ß√£o para mostrar detalhes de uma combina√ß√£o
    function mostrarDetalhesCombinacao(combo) {
        const modal = document.createElement('div');
        modal.className = 'modal';
        
        const modalContent = document.createElement('div');
        modalContent.className = 'modal-content';
        
        // Fechar modal
        const closeBtn = document.createElement('span');
        closeBtn.className = 'close-button';
        closeBtn.innerHTML = '&times;';
        closeBtn.onclick = () => {
            document.body.removeChild(modal);
        };
        
        // T√≠tulo
        const title = document.createElement('h3');
        title.textContent = `Detalhes da Combina√ß√£o: ${combo.digitos.join(',')}`;
        
        // Informa√ß√µes b√°sicas
        const infoDiv = document.createElement('div');
        infoDiv.className = 'combo-info';
        
        infoDiv.innerHTML = `
            <p><strong>Quantidade de d√≠gitos:</strong> ${combo.quantidade}</p>
            <p><strong>Aparece em ${combo.concursos.length} concursos:</strong> ${combo.concursos.join(', ')}</p>
            <p><strong>M√©dia de intervalo:</strong> ${combo.mediaIntervalos || '-'} concursos</p>
            <p><strong>Menor intervalo:</strong> ${combo.menorIntervalo || '-'} concursos</p>
            <p><strong>Maior intervalo:</strong> ${combo.maiorIntervalo || '-'} concursos</p>
            <p><strong>√öltimo intervalo:</strong> ${combo.ultimoIntervalo || '-'} concursos</p>
        `;
        
        // Intervalos entre concursos
        if (combo.intervalos && combo.intervalos.length > 0) {
            const intervalosDiv = document.createElement('div');
            intervalosDiv.className = 'intervalos-info';
            
            const intervalosTitle = document.createElement('h4');
            intervalosTitle.textContent = 'Intervalos entre Concursos';
            intervalosDiv.appendChild(intervalosTitle);
            
            const intervalosTable = document.createElement('table');
            intervalosTable.className = 'intervalos-table';
            
            // Cabe√ßalho
            const headerRow = document.createElement('tr');
            ['De Concurso', 'Para Concurso', 'Intervalo'].forEach(text => {
                const th = document.createElement('th');
                th.textContent = text;
                headerRow.appendChild(th);
            });
            intervalosTable.appendChild(headerRow);
            
            // Dados de intervalos
            for (let i = 1; i < combo.concursos.length; i++) {
                const row = document.createElement('tr');
                
                // De concurso
                const tdDe = document.createElement('td');
                tdDe.textContent = combo.concursos[i-1];
                row.appendChild(tdDe);
                
                // Para concurso
                const tdPara = document.createElement('td');
                tdPara.textContent = combo.concursos[i];
                row.appendChild(tdPara);
                
                // Intervalo
                const tdIntervalo = document.createElement('td');
                tdIntervalo.textContent = combo.concursos[i] - combo.concursos[i-1];
                row.appendChild(tdIntervalo);
                
                intervalosTable.appendChild(row);
            }
            
            intervalosDiv.appendChild(intervalosTable);
            infoDiv.appendChild(intervalosDiv);
        }
        
        // Combina√ß√µes similares
        const similaresDiv = document.createElement('div');
        similaresDiv.className = 'similares-info';
        
        if (combo.similares && combo.similares.length > 0) {
            const similaresTitle = document.createElement('h4');
            similaresTitle.textContent = 'Combina√ß√µes Similares';
            similaresDiv.appendChild(similaresTitle);
            
            const similaresTable = document.createElement('table');
            similaresTable.className = 'similares-table';
            
            // Cabe√ßalho
            const headerRow = document.createElement('tr');
            ['D√≠gitos Comuns', 'D√≠gitos Diferentes', 'Aparece em', 'Frequ√™ncia'].forEach(text => {
                const th = document.createElement('th');
                th.textContent = text;
                headerRow.appendChild(th);
            });
            similaresTable.appendChild(headerRow);
            
            // Dados de combina√ß√µes similares
            combo.similares.forEach(similar => {
                const row = document.createElement('tr');
                
                // D√≠gitos comuns
                const tdComuns = document.createElement('td');
                tdComuns.textContent = similar.digitosComuns.join(',');
                row.appendChild(tdComuns);
                
                // D√≠gitos diferentes
                const tdDiferentes = document.createElement('td');
                tdDiferentes.innerHTML = `
                    <span class="diferencas">
                        <span class="de">${similar.digitosDiferentes.de.join(',') || '-'}</span> ‚Üí
                        <span class="para">${similar.digitosDiferentes.para.join(',') || '-'}</span>
                    </span>
                `;
                row.appendChild(tdDiferentes);
                
                // Aparece em
                const tdConcursos = document.createElement('td');
                tdConcursos.textContent = similar.concursos.slice(0, 5).join(', ');
                if (similar.concursos.length > 5) {
                    tdConcursos.textContent += ` (+ ${similar.concursos.length - 5} outros)`;
                }
                row.appendChild(tdConcursos);
                
                // Frequ√™ncia
                const tdFreq = document.createElement('td');
                tdFreq.textContent = similar.concursos.length;
                row.appendChild(tdFreq);
                
                similaresTable.appendChild(row);
            });
            
            similaresDiv.appendChild(similaresTable);
        } else {
            similaresDiv.innerHTML = '<p>Nenhuma combina√ß√£o similar encontrada.</p>';
        }
        
        // Adicionar todos os elementos ao modal
        modalContent.appendChild(closeBtn);
        modalContent.appendChild(title);
        modalContent.appendChild(infoDiv);
        modalContent.appendChild(similaresDiv);
        
        modal.appendChild(modalContent);
        document.body.appendChild(modal);
        
        // Fechar o modal ao clicar fora dele
        window.onclick = (event) => {
            if (event.target === modal) {
                document.body.removeChild(modal);
            }
        };
    }
    
    // Fun√ß√£o para renderizar os resultados na tabela
    function renderResults(results) {
        const tableBody = document.getElementById('diaDeSorteResults').getElementsByTagName('tbody')[0];
        tableBody.innerHTML = '';
        
        // Atualizar informa√ß√£o sobre resultados filtrados
        const resultsInfoDiv = document.getElementById('resultadosInfo');
        if (!resultsInfoDiv) {
            const infoDiv = document.createElement('div');
            infoDiv.id = 'resultadosInfo';
            infoDiv.className = 'results-info';
            infoDiv.textContent = `Exibindo ${results.length} de ${allResults.length} resultados`;
            
            // Inserir antes da tabela
            const tableContainer = document.getElementById('diaDeSorteResults').parentNode;
            tableContainer.insertBefore(infoDiv, document.getElementById('diaDeSorteResults'));
        } else {
            resultsInfoDiv.textContent = `Exibindo ${results.length} de ${allResults.length} resultados`;
        }
        
        results.forEach(result => {
            const row = tableBody.insertRow();
            
            // Formatar data
            const dataParts = result.data ? result.data.split('/') : ['', '', ''];
            const dataFormatada = dataParts.length === 3 ? `${dataParts[0]}/${dataParts[1]}/${dataParts[2]}` : result.data;
            
            row.innerHTML = `
                <td>${result.concurso}</td>
                <td>${dataFormatada}</td>
                <td>${result.dezenas.join(' - ')}</td>
                <td>${result.digitos_para_exibicao || result.digitos.join(' ')}</td>
                <td>${result.digitos_ordenados.join(',')}</td>
                <td>${result.contagem_digitos}</td>
                <td>
                    <button class="copy-button" data-digits="${result.digitos_para_copia}">
                        Copiar
                    </button>
                </td>
            `;
        });
        
        // Adicionar event listeners para os bot√µes de c√≥pia
        document.querySelectorAll('.copy-button').forEach(button => {
            button.addEventListener('click', function() {
                const digits = this.getAttribute('data-digits');
                navigator.clipboard.writeText(digits)
                    .then(() => {
                        // Feedback visual para o usu√°rio
                        const originalText = this.textContent;
                        this.textContent = 'Copiado!';
                        setTimeout(() => {
                            this.textContent = originalText;
                        }, 1500);
                    })
                    .catch(err => {
                        console.error('Erro ao copiar: ', err);
                        alert('Erro ao copiar os d√≠gitos.');
                    });
            });
        });
    }
    
    // Fun√ß√£o para renderizar estat√≠sticas dos d√≠gitos
    function renderDigitStats(stats) {
        const digitFrequencyDiv = document.getElementById('digitFrequency');
        const digitChartDiv = document.getElementById('digitChart');
        
        digitFrequencyDiv.innerHTML = '';
        digitChartDiv.innerHTML = '';
        
        // Ordenar os d√≠gitos por frequ√™ncia (do maior para o menor)
        const sortedDigits = Object.entries(stats).sort((a, b) => b[1] - a[1]);
        
        // Criar visualiza√ß√£o da frequ√™ncia de d√≠gitos - Ordenada por frequ√™ncia
        sortedDigits.forEach(([digit, count]) => {
            const digitBox = document.createElement('div');
            digitBox.className = 'digit-box';
            digitBox.innerHTML = `${digit}<span class="digit-count">${count}</span>`;
            digitFrequencyDiv.appendChild(digitBox);
        });
        
        // Criar gr√°fico de barras para frequ√™ncia de d√≠gitos - Ordenado por frequ√™ncia
        const maxCount = Math.max(...Object.values(stats));
        const chartHtml = sortedDigits.map(([digit, count]) => {
            const percentage = (count / maxCount) * 100;
            return `
                <div style="margin: 10px 0;">
                    <div style="display: flex; align-items: center;">
                        <div style="width: 20px; text-align: center;">${digit}</div>
                        <div style="flex-grow: 1; margin: 0 10px;">
                            <div style="background-color: #4CAF50; height: 20px; width: ${percentage}%;"></div>
                        </div>
                        <div style="width: 40px; text-align: right;">${count}</div>
                    </div>
                </div>
            `;
        }).join('');
        
        digitChartDiv.innerHTML = chartHtml;
    }
    
// Fun√ß√µes para download
 function downloadCSV() {
    if (allResults.length === 0) {
        alert('Carregue os resultados primeiro!');
        return;
    }
    
    // Criando uma tabela HTML que o Excel pode importar corretamente
    let excelContent = '<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:x="urn:schemas-microsoft-com:office:excel" xmlns="http://www.w3.org/TR/REC-html40">';
    excelContent += '<head><!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet><x:Name>D√≠gitos Dia de Sorte</x:Name><x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]-->';
    excelContent += '<style>th { background-color: #000000; color: #ffffff; text-align: left; font-weight: bold; } td { text-align: left; } .concurso { mso-number-format:"0"; }</style>';
    excelContent += '</head>';
    excelContent += '<body><table border="1">';
    
    // Adicionar cabe√ßalho com acentos corretos e formata√ß√£o (fundo preto, fonte branca)
    excelContent += '<tr>';
    excelContent += '<th style="background-color: #000000; color: #ffffff;">Concurso</th>';
    excelContent += '<th style="background-color: #000000; color: #ffffff;">Data</th>';
    excelContent += '<th style="background-color: #000000; color: #ffffff;">Dezenas</th>';
    excelContent += '<th style="background-color: #000000; color: #ffffff;">D√≠gitos</th>';
    excelContent += '<th style="background-color: #000000; color: #ffffff;">D√≠gitos Ordenados</th>';
    excelContent += '<th style="background-color: #000000; color: #ffffff;">Qtd. D√≠gitos</th>';
    excelContent += '</tr>';
    
    // Adicionar dados (alinhados √† esquerda)
    filteredResults.forEach(result => {
        excelContent += '<tr>';
        excelContent += `<td class="concurso" style="text-align: left;">${result.concurso}</td>`;
        excelContent += `<td style="text-align: left;">${result.data}</td>`;
        excelContent += `<td style="text-align: left;">${result.dezenas.join(' - ')}</td>`;
        excelContent += `<td style="text-align: left;">${result.digitos_para_exibicao || result.digitos.join(' ')}</td>`;
        excelContent += `<td style="text-align: left;">${result.digitos_ordenados.join(',')}</td>`;
        excelContent += `<td style="text-align: left;">${result.contagem_digitos}</td>`;
        excelContent += '</tr>';
    });
    
    excelContent += '</table></body></html>';
    
    // Criar o blob com tipo MIME para Excel
    const blob = new Blob([excelContent], {type: 'application/vnd.ms-excel'});
    const link = document.createElement("a");
    link.href = URL.createObjectURL(blob);
    link.download = 'analise_digitos_diadesorte.xls';
    link.click();
}
   
function downloadJSON() {
    if (allResults.length === 0) {
        alert('Carregue os resultados primeiro!');
        return;
    }
    
    // Criar conte√∫do HTML formatado
    let htmlContent = `
    <!DOCTYPE html>
    <html lang="pt-br">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>An√°lise de D√≠gitos do Dia de Sorte</title>
        <style>
            body {
                font-family: Arial, sans-serif;
                margin: 0;
                padding: 20px;
                background-color: #f0f8ff;
                color: #333;
            }
            .container {
                max-width: 1200px;
                margin: 0 auto;
                padding: 20px;
                background-color: white;
                box-shadow: 0 0 10px rgba(0,0,0,0.1);
                border-radius: 5px;
            }
            h1, h2, h3 {
                color: #006400;
                text-align: center;
            }
            .section {
                margin-bottom: 30px;
                padding: 15px;
                background-color: #f9f9f9;
                border-radius: 5px;
                border: 1px solid #ddd;
            }
            table {
                width: 100%;
                border-collapse: collapse;
                margin: 15px 0;
            }
            th {
                background-color: #000000;
                color: white;
                padding: 10px;
                text-align: left;
            }
            td {
                padding: 8px;
                border: 1px solid #ddd;
                text-align: left;
            }
            tr:nth-child(even) {
                background-color: #f2f2f2;
            }
            .digit-box {
                display: inline-block;
                width: 40px;
                height: 40px;
                line-height: 40px;
                text-align: center;
                margin: 5px;
                background-color: #4CAF50;
                color: white;
                border-radius: 50%;
                font-weight: bold;
            }
            .digit-count {
                font-size: 12px;
                color: #666;
                display: block;
                text-align: center;
            }
            .footer {
                text-align: center;
                margin-top: 20px;
                font-size: 12px;
                color: #666;
                padding: 10px;
                border-top: 1px solid #ddd;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>An√°lise de D√≠gitos do Dia de Sorte</h1>
            
            <div class="section">
                <h2>Estat√≠sticas de Frequ√™ncia dos D√≠gitos</h2>
                <div style="display: flex; justify-content: center; flex-wrap: wrap; margin: 20px 0;">
    `;
    
    // Adicionar estat√≠sticas de d√≠gitos
    const sortedDigits = Object.entries(digitStats).sort((a, b) => b[1] - a[1]);
    sortedDigits.forEach(([digit, count]) => {
        htmlContent += `
            <div class="digit-box">${digit}
                <span class="digit-count">${count} vezes</span>
            </div>
        `;
    });
    
    htmlContent += `
                </div>
                
                <h3>Gr√°fico de Frequ√™ncia</h3>
                <div style="padding: 15px;">
    `;
    
    // Adicionar gr√°fico de barras simples
    const maxCount = Math.max(...Object.values(digitStats));
    sortedDigits.forEach(([digit, count]) => {
        const percentage = (count / maxCount) * 100;
        htmlContent += `
            <div style="margin: 10px 0; display: flex; align-items: center;">
                <div style="width: 30px; text-align: center; font-weight: bold;">${digit}</div>
                <div style="flex-grow: 1; margin: 0 10px;">
                    <div style="background-color: #4CAF50; height: 24px; width: ${percentage}%;"></div>
                </div>
                <div style="width: 60px; text-align: right;">${count}</div>
            </div>
        `;
    });
    
    htmlContent += `
                </div>
            </div>
            
            <div class="section">
                <h2>Resumo por Quantidade de D√≠gitos</h2>
                <table>
                    <thead>
                        <tr>
                            <th>Qtd. D√≠gitos</th>
                            <th>N√∫mero de Sorteios</th>
                            <th>Porcentagem</th>
                        </tr>
                    </thead>
                    <tbody>
    `;
    
    // Adicionar resumo por quantidade de d√≠gitos
    const qtdKeys = Object.keys(combinationStats.porQuantidade)
        .sort((a, b) => parseInt(a) - parseInt(b));
    
    qtdKeys.forEach(qtd => {
        const count = combinationStats.porQuantidade[qtd].length;
        const percentage = ((count / allResults.length) * 100).toFixed(2);
        htmlContent += `
            <tr>
                <td>${qtd}</td>
                <td>${count}</td>
                <td>${percentage}%</td>
            </tr>
        `;
    });
    
    htmlContent += `
                    </tbody>
                </table>
            </div>
            
            <div class="section">
                <h2>Combina√ß√µes Mais Frequentes</h2>
                <table>
                    <thead>
                        <tr>
                            <th>Combina√ß√£o</th>
                            <th>Qtd. D√≠gitos</th>
                            <th>Frequ√™ncia</th>
                        </tr>
                    </thead>
                    <tbody>
    `;
    
    // Adicionar combina√ß√µes mais frequentes
    combinationStats.combinacoesFrequentes.slice(0, 10).forEach(combo => {
        htmlContent += `
            <tr>
                <td>${combo.digitos.join(',')}</td>
                <td>${combo.quantidade}</td>
                <td>${combo.concursos.length}</td>
            </tr>
        `;
    });
    
    htmlContent += `
                    </tbody>
                </table>
            </div>
            
            <div class="section">
                <h2>Resultados Detalhados</h2>
                <table>
                    <thead>
                        <tr>
                            <th>Concurso</th>
                            <th>Data</th>
                            <th>Dezenas</th>
                            <th>D√≠gitos</th>
                            <th>D√≠gitos Ordenados</th>
                            <th>Qtd. D√≠gitos</th>
                        </tr>
                    </thead>
                    <tbody>
    `;
    
    // Adicionar resultados detalhados
    filteredResults.forEach(result => {
        htmlContent += `
            <tr>
                <td>${result.concurso}</td>
                <td>${result.data || ''}</td>
                <td>${result.dezenas.join(' - ')}</td>
                <td>${result.digitos_para_exibicao || result.digitos.join(' ')}</td>
                <td>${result.digitos_ordenados.join(',')}</td>
                <td>${result.contagem_digitos}</td>
            </tr>
        `;
    });
    
    htmlContent += `
                    </tbody>
                </table>
            </div>
            
            <div class="footer">
                <p>Relat√≥rio gerado em: ${new Date().toLocaleString('pt-BR')}</p>
                <p>Total de resultados analisados: ${allResults.length}</p>
            </div>
        </div>
    </body>
    </html>
    `;
    
    // Criar o blob com tipo MIME para HTML
    const blob = new Blob([htmlContent], {type: 'text/html;charset=utf-8'});
    const link = document.createElement("a");
    link.href = URL.createObjectURL(blob);
    link.download = 'analise_digitos_diadesorte.html';
    link.click();
}    
    function downloadTXT() {
        if (allResults.length === 0) {
            alert('Carregue os resultados primeiro!');
            return;
        }
        
        let txtContent = "An√°lise de D√≠gitos do Dia de Sorte\n\n";
        
        // Adicionar estat√≠sticas - ordenar por frequ√™ncia para o arquivo TXT tamb√©m
        txtContent += "ESTAT√çSTICAS DE FREQU√äNCIA DOS D√çGITOS (ORDEM DECRESCENTE):\n";
        const sortedStats = Object.entries(digitStats).sort((a, b) => b[1] - a[1]);
        sortedStats.forEach(([digit, count]) => {
            txtContent += `D√≠gito ${digit}: ${count} ocorr√™ncias\n`;
        });
        
        // Adicionar resumo de combina√ß√µes
        txtContent += "\n\nRESUMO POR QUANTIDADE DE D√çGITOS:\n";
        const qtdKeys = Object.keys(combinationStats.porQuantidade)
            .sort((a, b) => parseInt(a) - parseInt(b));
        
        qtdKeys.forEach(qtd => {
            const count = combinationStats.porQuantidade[qtd].length;
            const percentage = ((count / allResults.length) * 100).toFixed(2);
            txtContent += `${qtd} d√≠gitos: ${count} sorteios (${percentage}%)\n`;
        });
        
        // Adicionar combina√ß√µes mais frequentes
        txtContent += "\n\nCOMBINA√á√ïES MAIS FREQUENTES:\n";
        combinationStats.combinacoesFrequentes.slice(0, 5).forEach((combo, index) => {
            txtContent += `${index + 1}. Combina√ß√£o [${combo.digitos.join(',')}]: Aparece em ${combo.concursos.length} sorteios\n`;
        });
        
        txtContent += "\n\nRESULTADOS DETALHADOS:\n";
        filteredResults.forEach(result => {
            const digitos = result.digitos_para_exibicao || result.digitos.join(' ');
            const digitosOrdenados = result.digitos_ordenados.join(',');
            txtContent += `Concurso: ${result.concurso} | Data: ${result.data} | Dezenas: ${result.dezenas.join('-')} | `;
            txtContent += `D√≠gitos: ${digitos} | Ordenados: ${digitosOrdenados} | `;
            txtContent += `Quantidade: ${result.contagem_digitos}\n`;
        });
        
        // Criar o blob com tipo MIME para texto
        const blob = new Blob([txtContent], {type: 'text/plain;charset=utf-8'});
        const link = document.createElement("a");
        link.href = URL.createObjectURL(blob);
        link.download = 'analise_digitos_diadesorte.txt';
        link.click();
    }
	
	// Fun√ß√£o auxiliar para download de arquivos
	function downloadFile(content, fileName, type) {
    const blob = new Blob([content], { type });
    const link = document.createElement("a");
    link.href = URL.createObjectURL(blob);
    link.download = fileName;
    link.click();
    console.log("Download iniciado:", fileName);
	}
	
});



#tabelas-responsivas.js
/**
 * Script para tornar as tabelas responsivas
 * Adicione este arquivo como tabelas-responsivas.js ou incorpore no seu script.js existente
 */

// Executar quando o documento estiver carregado
document.addEventListener('DOMContentLoaded', function() {
    console.log('Script de tabelas responsivas carregado');
    
    // Aguardar um momento para garantir que as tabelas foram renderizadas
    setTimeout(function() {
        tornarTabelasResponsivas();
    }, 1000);
    
    // Adicionar um observador para quando os dados forem carregados
    const verificarCarregamento = setInterval(function() {
        const mensagemCompletada = document.getElementById('completedMessage');
        if (mensagemCompletada && getComputedStyle(mensagemCompletada).display !== 'none') {
            console.log('Carregamento detectado, aplicando responsividade √†s tabelas');
            setTimeout(function() {
                tornarTabelasResponsivas();
            }, 500);
            clearInterval(verificarCarregamento);
        }
    }, 1000);
    
    // Limitar a verifica√ß√£o a 30 segundos
    setTimeout(function() {
        clearInterval(verificarCarregamento);
    }, 30000);
    
    // Se existir um bot√£o de carregar, adicionar um listener para tornar as tabelas responsivas ap√≥s o carregamento
    const loadButton = document.getElementById('loadButton');
    if (loadButton) {
        loadButton.addEventListener('click', function() {
            console.log('Bot√£o de carregar clicado, aguardando para tornar tabelas responsivas');
            setTimeout(function() {
                tornarTabelasResponsivas();
            }, 2000);
        });
    }
    
    // Se existir um bot√£o de an√°lise de frequ√™ncias, adicionar um listener
    document.addEventListener('click', function(event) {
        if (event.target && (event.target.id === 'botaoAnalisarFrequencias' || event.target.id === 'botaoManual')) {
            console.log('Bot√£o de an√°lise clicado, aguardando para tornar tabelas responsivas');
            setTimeout(function() {
                tornarTabelasResponsivas();
            }, 1000);
        }
    });
});

// Fun√ß√£o principal para tornar as tabelas responsivas
function tornarTabelasResponsivas() {
    console.log('Aplicando responsividade √†s tabelas');
    
    // Lista de seletores de tabelas para tornar responsivas
    const seletoresTabelas = [
        '#megaSenaResults',
        '.combinations-table',
        '.summary-table',
        '.frequency-table',
        '.similares-table',
        '.interval-table'
    ];
    
    // Processar cada seletor
    seletoresTabelas.forEach(function(seletor) {
        const tabelas = document.querySelectorAll(seletor);
        
        tabelas.forEach(function(tabela) {
            // Verificar se a tabela j√° est√° em um container responsivo
            if (!tabela.parentElement.classList.contains('table-responsive')) {
                console.log('Tornando responsiva a tabela:', seletor);
                
                // Criar um container responsivo
                const container = document.createElement('div');
                container.className = 'table-responsive';
                
                // Substituir a tabela pelo container contendo a tabela
                tabela.parentNode.insertBefore(container, tabela);
                container.appendChild(tabela);
                
                // Adicionar indicadores de rolagem
                adicionarIndicadoresRolagem(container);
            }
        });
    });
    
    console.log('Todas as tabelas foram processadas');
}

// Fun√ß√£o para adicionar indicadores visuais de rolagem horizontal
function adicionarIndicadoresRolagem(container) {
    // Verificar se o conte√∫do √© maior que o container
    const verificarRolagem = function() {
        if (container.scrollWidth > container.clientWidth) {
            container.classList.add('has-scroll');
            
            // Adicionar classe quando rolar horizontalmente
            container.addEventListener('scroll', function() {
                if (container.scrollLeft > 0) {
                    container.classList.add('is-scrolling');
                } else {
                    container.classList.remove('is-scrolling');
                }
                
                // Adicionar classe quando chegar ao final da rolagem
                if (Math.ceil(container.scrollLeft + container.clientWidth) >= container.scrollWidth) {
                    container.classList.add('scroll-end');
                } else {
                    container.classList.remove('scroll-end');
                }
            });
        } else {
            container.classList.remove('has-scroll');
        }
    };
    
    // Verificar inicialmente
    verificarRolagem();
    
    // Verificar novamente quando a janela for redimensionada
    window.addEventListener('resize', verificarRolagem);
}

// Adicionar eventos para reajustar as tabelas quando necess√°rio
window.addEventListener('resize', function() {
    // Atualizar indicadores de rolagem para todas as tabelas responsivas
    document.querySelectorAll('.table-responsive').forEach(function(container) {
        if (container.scrollWidth > container.clientWidth) {
            container.classList.add('has-scroll');
        } else {
            container.classList.remove('has-scroll');
        }
    });
});



#popup-style.css
.info-icon {
  display: inline-block;
  width: 16px;
  height: 16px;
  border-radius: 50%;
  background-color: #4CAF50;
  color: white;
  text-align: center;
  line-height: 16px;
  font-size: 12px;
  font-weight: bold;
  margin-left: 5px;
  cursor: pointer;
}

.explicacao-popup {
  display: none;
  position: absolute;
  background-color: white;
  border: 1px solid #ddd;
  border-radius: 5px;
  padding: 15px;
  box-shadow: 0 2px 10px rgba(0,0,0,0.2);
  z-index: 1000;
  max-width: 400px;
  font-size: 14px;
  line-height: 1.5;
}

.explicacao-popup h4 {
  margin-top: 0;
  color: #4CAF50;
}

.explicacao-popup ul {
  padding-left: 20px;
}

.explicacao-popup p {
  margin: 10px 0;
}



#styles.css
body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
    background-color: #FFFFFF;
    color: #2E8B57;
}

.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
}

h1, h2, h3 {
    text-align: center;
    color: #006400;
}

.centralizado {
    text-align: center;
    margin-bottom: 20px;
}

.actions {
    display: flex;
    justify-content: center;
    margin-bottom: 20px;
}

.button {
    background-color: #32CD32;
    color: black;
    border: none;
    padding: 10px 20px;
    cursor: pointer;
    font-size: 16px;
    margin: 10px;
    border-radius: 5px;
    transition: background-color 0.3s ease;
}

.button:hover {
    background-color: #28a745;
}

.loading, .completed {
    text-align: center;
    margin: 10px 0;
    font-weight: bold;
}

.completed {
    color: red;
}

/* Estilos para a tabela */
table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 20px;
    background-color: #F0F8FF;
}

th, td {
    padding: 10px;
    text-align: center;
    border: 1px solid #4CAF50;
    font-size: small;
}

th {
    background-color: #4CAF50;
    color: white;
}

tr:nth-child(even) {
    background-color: #F9F9F9;
}

tr:nth-child(odd) {
    background-color: #FFFFFF;
}

.copy-button {
    background-color: #4CAF50;
    color: white;
    border: none;
    padding: 5px 10px;
    cursor: pointer;
    border-radius: 3px;
}

.copy-button:hover {
    background-color: #45a049;
}

/* Estat√É¬≠sticas de d√É¬≠gitos */
.statistics-container {
    margin: 20px 0;
    padding: 20px;
    background-color: #f0f8ff;
    border-radius: 5px;
    border: 1px solid #4CAF50;
}

.digit-stats {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-around;
}

.digit-frequency, .digit-charts {
    flex: 1;
    min-width: 300px;
    margin: 10px;
}

.digit-box {
    display: inline-block;
    width: 40px;
    height: 40px;
    line-height: 40px;
    text-align: center;
    margin: 5px;
    background-color: #4CAF50;
    color: white;
    border-radius: 50%;
    font-weight: bold;
}

.digit-count {
    font-size: 14px;
    display: block;
    color: #333;
}

.download-buttons {
    margin: 20px 0;
    text-align: center;
}

footer {
    text-align: center;
    margin-top: 30px;
    padding: 10px;
    font-size: 14px;
    color: #666;
}
/* Estilos para filtros */
.filter-container {
    margin: 20px 0;
    padding: 15px;
    background-color: #f0f8ff;
    border-radius: 5px;
    border: 1px solid #4CAF50;
}

.filters {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    align-items: center;
}

.filter-item {
    display: flex;
    align-items: center;
    margin-right: 15px;
}

.filter-item label {
    margin-right: 5px;
    font-weight: bold;
}

.filter-item select {
    padding: 5px;
    border: 1px solid #4CAF50;
    border-radius: 4px;
}

.results-info {
    margin: 10px 0;
    font-style: italic;
    color: #666;
}

/* Estilos para an√°lise de combina√ß√µes */
.combination-analysis {
    margin: 30px 0;
}

.combinations-table, .summary-table, .similares-table {
    width: 100%;
    border-collapse: collapse;
    margin: 15px 0;
}

.details-button {
    background-color: #4CAF50;
    color: white;
    border: none;
    padding: 5px 10px;
    cursor: pointer;
    border-radius: 3px;
}

.details-button:hover {
    background-color: #45a049;
}

/* Estilos para modal */
.modal {
    display: block;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0,0,0,0.7);
}

.modal-content {
    background-color: #fefefe;
    margin: 5% auto;
    padding: 20px;
    border: 1px solid #888;
    width: 80%;
    max-width: 800px;
    border-radius: 5px;
    max-height: 80vh;
    overflow-y: auto;
}

.close-button {
    color: #aaa;
    float: right;
    font-size: 28px;
    font-weight: bold;
    cursor: pointer;
}

.close-button:hover {
    color: black;
}

.diferencas .de {
    color: #d9534f;
}

.diferencas .para {
    color: #5bc0de;
}

.combo-info, .similares-info {
    margin: 15px 0;
}
/* Estilos para destacar valores m√°ximos */

/* Transi√ß√µes suaves para todos os elementos */
.digit-box, .digit-count, #digitChart div, 
.combinations-table tr, .summary-table tr, .similares-table tr,
.combinations-table td, .summary-table td, .similares-table td {
    transition: all 0.3s ease;
}

/* Caixa de d√≠gito destacada */
.digit-box-highlighted {
    background-color: #d9534f !important;
    transform: scale(1.1);
    box-shadow: 0 0 8px rgba(217, 83, 79, 0.7);
    z-index: 2;
    position: relative;
}

.digit-box-highlighted .digit-count {
    font-weight: bold;
    color: white !important;
}

/* Linha de tabela destacada */
.row-highlighted {
    background-color: rgba(217, 83, 79, 0.15) !important;
}

/* C√©lula destacada */
.cell-highlighted {
    font-weight: bold !important;
    color: #d9534f !important;
    font-size: 110% !important;
}

/* Barra de gr√°fico destacada */
.bar-highlighted {
    background-color: #d9534f !important;
    height: 24px !important;
}
#resumo{
    font-family: 'Courier New', Courier, monospace;
    color: #333;
    margin-left: 10%;
    margin-right: 10%;
    text-align: justify;
}
.destaque {
    color: red;
}

/* Responsividade melhorada */
@media (max-width: 768px) {
    .filters {
        flex-direction: column;
        align-items: stretch;
    }
    
    .filter-item {
        margin: 5px 0;
        width: 100%;
    }
    
    .modal-content {
        width: 95%;
        margin: 10% auto;
    }
}


#tabelas-responsivas.css
/* 
 * CSS para tornar tabelas responsivas com barra de rolagem horizontal 
 * Adicione este c√≥digo ao seu arquivo styles.css existente
 */

/* Estilo para containers de tabelas responsivas */
.table-responsive {
    overflow-x: auto;
    -webkit-overflow-scrolling: touch;
    margin-bottom: 1rem;
    width: 100%;
    max-width: 100%;
    border-radius: 5px;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
}


/* Indicadores visuais de rolagem horizontal */
.table-responsive::after {
    content: "";
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    width: 5px;
    background: linear-gradient(to right, transparent, rgba(76, 175, 80, 0.3));
    pointer-events: none;
    opacity: 0;
    transition: opacity 0.3s;
}

.table-responsive:hover::after {
    opacity: 1;
}

/* Estilos espec√≠ficos para cada tabela */
#megaSenaResults, 
.combinations-table, 
.summary-table, 
.frequency-table {
    width: 100%;
    border-collapse: collapse;
}

/* Ajustes para o container do resumo em telas pequenas */
@media screen and (max-width: 768px) {
    #resumo {
        padding: 15px;
    }
    
    #resumo h2 {
        font-size: 1.2rem;
    }
    
    #resumo p,
    #resumo li {
        font-size: 0.9rem;
    }
}

/* Fix para bot√µes em telas pequenas */
@media screen and (max-width: 480px) {
    .button {
        padding: 8px 12px;
        font-size: 14px;
        margin: 5px;
    }
    
    .actions {
        flex-wrap: wrap;
        justify-content: center;
    }
}
/* Ajustes para tornar tabelas mais compactas em telas pequenas 
@media screen and (max-width: 768px) {
    .table-responsive table {
        min-width: 650px; /* Garante que a tabela tenha um tamanho m√≠nimo para necessitar rolagem 
    }
    
    .table-responsive th,
    .table-responsive td {
        padding: 8px 5px;
        font-size: clamp(10px, 2vw, 12px);
    }
    
    .table-responsive th {
        position: sticky;
        top: 0;
        z-index: 10;
        background-color: #4CAF50;
    }
}
*/
/* Para telas menores que 1024px (tablets e laptops pequenos) */
@media screen and (max-width: 1024px) {
    .table-responsive table {
        min-width: 700px;
    }

    .table-responsive th,
    .table-responsive td {
        padding: 10px 6px;
        font-size: clamp(11px, 2vw, 14px);
    }

    .table-responsive th {
        background-color: #45A049;
    }
}

/* Para telas menores que 768px (tablets e celulares grandes) */
@media screen and (max-width: 768px) {
    .table-responsive table {
        min-width: 650px;
    }

    .table-responsive th,
    .table-responsive td {
        padding: 8px 5px;
        font-size: clamp(10px, 2vw, 12px);
    }

    .table-responsive th {
        position: sticky;
        top: 0;
        z-index: 10;
        background-color: #4CAF50;
    }
}

/* Para telas menores que 480px (celulares pequenos) */
@media screen and (max-width: 480px) {
    .table-responsive table {
        min-width: 600px;
    }

    .table-responsive th,
    .table-responsive td {
        padding: 6px 4px;
        font-size: clamp(9px, 2vw, 11px);
    }

    .table-responsive th {
        background-color: #3E8E41;
    }
}

/* Para telas menores que 360px (celulares muito pequenos) */
@media screen and (max-width: 360px) {
    .table-responsive table {
        min-width: 550px;
    }

    .table-responsive th,
    .table-responsive td {
        padding: 5px 3px;
        font-size: clamp(8px, 2vw, 10px);
    }

    .table-responsive th {
        background-color: #2E7D32;
    }
}



#routes.py
from flask import render_template, jsonify, request
from app import app
import requests
import redis
import os
import json
import logging

#API_BASE_URL = os.getenv('API_BASE_URL', 'https://loteriascaixa-api.herokuapp.com/api')

# Configurar logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

# Configura√ß√µes do Redis
REDIS_HOST = os.getenv('REDIS_HOST')
REDIS_PORT = os.getenv('REDIS_PORT')
REDIS_PASSWORD = os.getenv('REDIS_PASSWORD')
REDIS_DB = os.getenv('REDIS_DB', '0')
API_BASE_URL = os.getenv('API_BASE_URL')

logger.info(f"Configura√ß√µes carregadas: HOST={REDIS_HOST}, PORT={REDIS_PORT}, API={API_BASE_URL}")

# Conex√£o com o Redis
try:
    redis_client = redis.Redis(
        host=REDIS_HOST,
        port=int(REDIS_PORT),
        password=REDIS_PASSWORD,
        db=int(REDIS_DB),
        decode_responses=True
    )
    # Teste da conex√£o
    redis_client.ping()
    logger.info("Conex√£o com Redis estabelecida com sucesso")
except Exception as e:
    logger.error(f"Erro ao conectar ao Redis: {str(e)}")
    # Criar um mock do redis em mem√≥ria para n√£o quebrar a aplica√ß√£o
    class MockRedis:
        def __init__(self):
            self.data = {}
        
        def get(self, key):
            return self.data.get(key)
        
        def set(self, key, value, ex=None):
            self.data[key] = value
            return True
        
        def ping(self):
            return True
    
    redis_client = MockRedis()
    logger.warning("Usando Redis em mem√≥ria (mock)")

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/api/resultados')
def get_resultados():
    cache_key = 'diadesorte:resultados'
    
    # Verifica se os dados est√£o em cache
    try:
        cached_data = redis_client.get(cache_key)
        if cached_data:
            logger.info("Usando dados do cache para resultados")
            return jsonify(json.loads(cached_data))
    except Exception as e:
        logger.error(f"Erro ao acessar cache: {str(e)}")
    
    # Se n√£o estiver em cache, busca na API
    try:
        logger.info(f"Buscando dados na API: {API_BASE_URL}/diadesorte")
        response = requests.get(f"{API_BASE_URL}/diadesorte")
        if response.status_code == 200:
            data = response.json()
            logger.info(f"Dados recebidos da API: {len(data)} registros")
            # Salva no Redis por 1 hora (3600 segundos)
            try:
                redis_client.set(cache_key, json.dumps(data), ex=3600)
            except Exception as e:
                logger.error(f"Erro ao salvar no cache: {str(e)}")
            return jsonify(data)
        else:
            logger.error(f"Erro ao acessar API: {response.status_code}")
            return jsonify({"error": f"Erro ao acessar a API: {response.status_code}"}), 500
    except Exception as e:
        logger.error(f"Exce√ß√£o ao buscar dados: {str(e)}")
        return jsonify({"error": str(e)}), 500

@app.route('/api/digitos')
def get_digitos():
    cache_key = 'diadesorte:digitos'
    
    # Log para debug
    logger.info("Rota /api/digitos acessada")
    
    # Verifica se os dados est√£o em cache
    try:
        cached_data = redis_client.get(cache_key)
        if cached_data:
            logger.info("Usando dados do cache para d√≠gitos")
            return jsonify(json.loads(cached_data))
    except Exception as e:
        logger.error(f"Erro ao acessar cache: {str(e)}")
    
    # Se n√£o estiver em cache, processa os dados
    try:
        logger.info(f"Buscando dados na API: {API_BASE_URL}/diadesorte")
        response = requests.get(f"{API_BASE_URL}/diadesorte")
        if response.status_code == 200:
            data = response.json()
            logger.info(f"Dados recebidos da API: {len(data)} registros")
            
            # Processar os d√≠gitos
            resultados_processados = []
            frequencia_digitos = {str(i): 0 for i in range(10)}
            
            for concurso in data:
                dezenas = concurso.get('dezenas', [])
                
                # Extrair d√≠gitos √∫nicos das dezenas
                digitos_unicos_set = set()
                for dezena in dezenas:
                    for digito in dezena:
                        digitos_unicos_set.add(digito)
                        frequencia_digitos[digito] += 1
                
                # Converter para lista e ordenar (ordem decrescente para exibi√ß√£o)
                digitos_unicos = sorted(list(digitos_unicos_set), reverse=True)
                
                # Ordenar d√≠gitos para facilitar c√≥pia (ordem crescente)
                digitos_ordenados = sorted(list(digitos_unicos_set))
                
                resultados_processados.append({
                    'concurso': concurso.get('concurso'),
                    'data': concurso.get('data'),
                    'dezenas': dezenas,
                    'digitos': digitos_unicos,  # D√≠gitos sem repeti√ß√£o, em ordem decrescente
                    'digitos_ordenados': digitos_ordenados,  # D√≠gitos sem repeti√ß√£o, em ordem crescente
                    'digitos_para_copia': ','.join(digitos_ordenados),  # Com v√≠rgulas para facilitar c√≥pia
                    'digitos_para_exibicao': ' '.join(digitos_unicos),  # Com espa√ßos para exibi√ß√£o
                    'contagem_digitos': len(digitos_unicos_set)  # Quantidade de d√≠gitos √∫nicos
                })
            
            # Ordenar frequ√™ncia de d√≠gitos
            frequencia_ordenada = {k: v for k, v in sorted(frequencia_digitos.items(), key=lambda item: item[1], reverse=True)}
            
            resultado_final = {
                'resultados': resultados_processados,
                'frequencia_digitos': frequencia_ordenada
            }
            
            # Salva no Redis por 1 hora (3600 segundos)
            try:
                redis_client.set(cache_key, json.dumps(resultado_final), ex=3600)
            except Exception as e:
                logger.error(f"Erro ao salvar no cache: {str(e)}")
                
            logger.info("Processamento de d√≠gitos conclu√≠do com sucesso")
            return jsonify(resultado_final)
        else:
            logger.error(f"Erro ao acessar API: {response.status_code}")
            return jsonify({"error": f"Erro ao acessar a API: {response.status_code}"}), 500
    except Exception as e:
        logger.error(f"Exce√ß√£o ao processar dados: {str(e)}")
        return jsonify({"error": str(e)}), 500

#__init__.py
import os
from flask import Flask
from flask_cors import CORS
from dotenv import load_dotenv

load_dotenv()  # Carregar vari√É¬°veis de ambiente do arquivo .env

app = Flask(__name__, 
            static_folder='../static',
            template_folder='../templates')
CORS(app)

from app import routes
